package sdk

import ecs "github.com/aws/aws-sdk-go/service/ecs"
import ecsiface "github.com/aws/aws-sdk-go/service/ecs/ecsiface"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// ECSAPI is an autogenerated mock type for the ECSAPI type
type ECSAPI struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: _a0
func (_m *ECSAPI) CreateCluster(_a0 *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.CreateClusterOutput
	if rf, ok := ret.Get(0).(func(*ecs.CreateClusterInput) *ecs.CreateClusterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.CreateClusterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) CreateClusterRequest(_a0 *ecs.CreateClusterInput) (*request.Request, *ecs.CreateClusterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.CreateClusterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.CreateClusterOutput
	if rf, ok := ret.Get(1).(func(*ecs.CreateClusterInput) *ecs.CreateClusterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.CreateClusterOutput)
		}
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: _a0
func (_m *ECSAPI) CreateService(_a0 *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.CreateServiceOutput
	if rf, ok := ret.Get(0).(func(*ecs.CreateServiceInput) *ecs.CreateServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.CreateServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) CreateServiceRequest(_a0 *ecs.CreateServiceInput) (*request.Request, *ecs.CreateServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.CreateServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.CreateServiceOutput
	if rf, ok := ret.Get(1).(func(*ecs.CreateServiceInput) *ecs.CreateServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.CreateServiceOutput)
		}
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: _a0
func (_m *ECSAPI) DeleteCluster(_a0 *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DeleteClusterOutput
	if rf, ok := ret.Get(0).(func(*ecs.DeleteClusterInput) *ecs.DeleteClusterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DeleteClusterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DeleteClusterRequest(_a0 *ecs.DeleteClusterInput) (*request.Request, *ecs.DeleteClusterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DeleteClusterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DeleteClusterOutput
	if rf, ok := ret.Get(1).(func(*ecs.DeleteClusterInput) *ecs.DeleteClusterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DeleteClusterOutput)
		}
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: _a0
func (_m *ECSAPI) DeleteService(_a0 *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DeleteServiceOutput
	if rf, ok := ret.Get(0).(func(*ecs.DeleteServiceInput) *ecs.DeleteServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DeleteServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DeleteServiceRequest(_a0 *ecs.DeleteServiceInput) (*request.Request, *ecs.DeleteServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DeleteServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DeleteServiceOutput
	if rf, ok := ret.Get(1).(func(*ecs.DeleteServiceInput) *ecs.DeleteServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DeleteServiceOutput)
		}
	}

	return r0, r1
}

// DeregisterContainerInstance provides a mock function with given fields: _a0
func (_m *ECSAPI) DeregisterContainerInstance(_a0 *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DeregisterContainerInstanceOutput
	if rf, ok := ret.Get(0).(func(*ecs.DeregisterContainerInstanceInput) *ecs.DeregisterContainerInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeregisterContainerInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DeregisterContainerInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterContainerInstanceRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DeregisterContainerInstanceRequest(_a0 *ecs.DeregisterContainerInstanceInput) (*request.Request, *ecs.DeregisterContainerInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DeregisterContainerInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DeregisterContainerInstanceOutput
	if rf, ok := ret.Get(1).(func(*ecs.DeregisterContainerInstanceInput) *ecs.DeregisterContainerInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DeregisterContainerInstanceOutput)
		}
	}

	return r0, r1
}

// DeregisterTaskDefinition provides a mock function with given fields: _a0
func (_m *ECSAPI) DeregisterTaskDefinition(_a0 *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DeregisterTaskDefinitionOutput
	if rf, ok := ret.Get(0).(func(*ecs.DeregisterTaskDefinitionInput) *ecs.DeregisterTaskDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeregisterTaskDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DeregisterTaskDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTaskDefinitionRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DeregisterTaskDefinitionRequest(_a0 *ecs.DeregisterTaskDefinitionInput) (*request.Request, *ecs.DeregisterTaskDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DeregisterTaskDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DeregisterTaskDefinitionOutput
	if rf, ok := ret.Get(1).(func(*ecs.DeregisterTaskDefinitionInput) *ecs.DeregisterTaskDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DeregisterTaskDefinitionOutput)
		}
	}

	return r0, r1
}

// DescribeClusters provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeClusters(_a0 *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DescribeClustersOutput
	if rf, ok := ret.Get(0).(func(*ecs.DescribeClustersInput) *ecs.DescribeClustersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DescribeClustersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClustersRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeClustersRequest(_a0 *ecs.DescribeClustersInput) (*request.Request, *ecs.DescribeClustersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DescribeClustersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DescribeClustersOutput
	if rf, ok := ret.Get(1).(func(*ecs.DescribeClustersInput) *ecs.DescribeClustersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DescribeClustersOutput)
		}
	}

	return r0, r1
}

// DescribeContainerInstances provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeContainerInstances(_a0 *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DescribeContainerInstancesOutput
	if rf, ok := ret.Get(0).(func(*ecs.DescribeContainerInstancesInput) *ecs.DescribeContainerInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeContainerInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DescribeContainerInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContainerInstancesRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeContainerInstancesRequest(_a0 *ecs.DescribeContainerInstancesInput) (*request.Request, *ecs.DescribeContainerInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DescribeContainerInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DescribeContainerInstancesOutput
	if rf, ok := ret.Get(1).(func(*ecs.DescribeContainerInstancesInput) *ecs.DescribeContainerInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DescribeContainerInstancesOutput)
		}
	}

	return r0, r1
}

// DescribeServices provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeServices(_a0 *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DescribeServicesOutput
	if rf, ok := ret.Get(0).(func(*ecs.DescribeServicesInput) *ecs.DescribeServicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DescribeServicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServicesRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeServicesRequest(_a0 *ecs.DescribeServicesInput) (*request.Request, *ecs.DescribeServicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DescribeServicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DescribeServicesOutput
	if rf, ok := ret.Get(1).(func(*ecs.DescribeServicesInput) *ecs.DescribeServicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DescribeServicesOutput)
		}
	}

	return r0, r1
}

// DescribeTaskDefinition provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeTaskDefinition(_a0 *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DescribeTaskDefinitionOutput
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTaskDefinitionInput) *ecs.DescribeTaskDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTaskDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DescribeTaskDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTaskDefinitionRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeTaskDefinitionRequest(_a0 *ecs.DescribeTaskDefinitionInput) (*request.Request, *ecs.DescribeTaskDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTaskDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DescribeTaskDefinitionOutput
	if rf, ok := ret.Get(1).(func(*ecs.DescribeTaskDefinitionInput) *ecs.DescribeTaskDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DescribeTaskDefinitionOutput)
		}
	}

	return r0, r1
}

// DescribeTasks provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeTasks(_a0 *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DescribeTasksOutput
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTasksInput) *ecs.DescribeTasksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DescribeTasksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTasksRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DescribeTasksRequest(_a0 *ecs.DescribeTasksInput) (*request.Request, *ecs.DescribeTasksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTasksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DescribeTasksOutput
	if rf, ok := ret.Get(1).(func(*ecs.DescribeTasksInput) *ecs.DescribeTasksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DescribeTasksOutput)
		}
	}

	return r0, r1
}

// DiscoverPollEndpoint provides a mock function with given fields: _a0
func (_m *ECSAPI) DiscoverPollEndpoint(_a0 *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.DiscoverPollEndpointOutput
	if rf, ok := ret.Get(0).(func(*ecs.DiscoverPollEndpointInput) *ecs.DiscoverPollEndpointOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DiscoverPollEndpointOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.DiscoverPollEndpointInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverPollEndpointRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) DiscoverPollEndpointRequest(_a0 *ecs.DiscoverPollEndpointInput) (*request.Request, *ecs.DiscoverPollEndpointOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.DiscoverPollEndpointInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.DiscoverPollEndpointOutput
	if rf, ok := ret.Get(1).(func(*ecs.DiscoverPollEndpointInput) *ecs.DiscoverPollEndpointOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.DiscoverPollEndpointOutput)
		}
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: _a0
func (_m *ECSAPI) ListClusters(_a0 *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListClustersOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListClustersInput) *ecs.ListClustersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListClustersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListClustersPages(_a0 *ecs.ListClustersInput, _a1 func(*ecs.ListClustersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListClustersRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListClustersRequest(_a0 *ecs.ListClustersInput) (*request.Request, *ecs.ListClustersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListClustersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListClustersOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListClustersInput) *ecs.ListClustersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListClustersOutput)
		}
	}

	return r0, r1
}

// ListContainerInstances provides a mock function with given fields: _a0
func (_m *ECSAPI) ListContainerInstances(_a0 *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListContainerInstancesOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListContainerInstancesInput) *ecs.ListContainerInstancesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListContainerInstancesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListContainerInstancesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainerInstancesPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListContainerInstancesPages(_a0 *ecs.ListContainerInstancesInput, _a1 func(*ecs.ListContainerInstancesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContainerInstancesRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListContainerInstancesRequest(_a0 *ecs.ListContainerInstancesInput) (*request.Request, *ecs.ListContainerInstancesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListContainerInstancesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListContainerInstancesOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListContainerInstancesInput) *ecs.ListContainerInstancesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListContainerInstancesOutput)
		}
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: _a0
func (_m *ECSAPI) ListServices(_a0 *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListServicesOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListServicesInput) *ecs.ListServicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListServicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListServicesPages(_a0 *ecs.ListServicesInput, _a1 func(*ecs.ListServicesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListServicesRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListServicesRequest(_a0 *ecs.ListServicesInput) (*request.Request, *ecs.ListServicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListServicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListServicesOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListServicesInput) *ecs.ListServicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListServicesOutput)
		}
	}

	return r0, r1
}

// ListTaskDefinitionFamilies provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTaskDefinitionFamilies(_a0 *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListTaskDefinitionFamiliesOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionFamiliesInput) *ecs.ListTaskDefinitionFamiliesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTaskDefinitionFamiliesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListTaskDefinitionFamiliesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskDefinitionFamiliesPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListTaskDefinitionFamiliesPages(_a0 *ecs.ListTaskDefinitionFamiliesInput, _a1 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTaskDefinitionFamiliesRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTaskDefinitionFamiliesRequest(_a0 *ecs.ListTaskDefinitionFamiliesInput) (*request.Request, *ecs.ListTaskDefinitionFamiliesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionFamiliesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListTaskDefinitionFamiliesOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListTaskDefinitionFamiliesInput) *ecs.ListTaskDefinitionFamiliesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListTaskDefinitionFamiliesOutput)
		}
	}

	return r0, r1
}

// ListTaskDefinitions provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTaskDefinitions(_a0 *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListTaskDefinitionsOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionsInput) *ecs.ListTaskDefinitionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTaskDefinitionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListTaskDefinitionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskDefinitionsPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListTaskDefinitionsPages(_a0 *ecs.ListTaskDefinitionsInput, _a1 func(*ecs.ListTaskDefinitionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTaskDefinitionsRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTaskDefinitionsRequest(_a0 *ecs.ListTaskDefinitionsInput) (*request.Request, *ecs.ListTaskDefinitionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListTaskDefinitionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListTaskDefinitionsOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListTaskDefinitionsInput) *ecs.ListTaskDefinitionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListTaskDefinitionsOutput)
		}
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTasks(_a0 *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.ListTasksOutput
	if rf, ok := ret.Get(0).(func(*ecs.ListTasksInput) *ecs.ListTasksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.ListTasksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasksPages provides a mock function with given fields: _a0, _a1
func (_m *ECSAPI) ListTasksPages(_a0 *ecs.ListTasksInput, _a1 func(*ecs.ListTasksOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTasksRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) ListTasksRequest(_a0 *ecs.ListTasksInput) (*request.Request, *ecs.ListTasksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.ListTasksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.ListTasksOutput
	if rf, ok := ret.Get(1).(func(*ecs.ListTasksInput) *ecs.ListTasksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.ListTasksOutput)
		}
	}

	return r0, r1
}

// RegisterContainerInstance provides a mock function with given fields: _a0
func (_m *ECSAPI) RegisterContainerInstance(_a0 *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.RegisterContainerInstanceOutput
	if rf, ok := ret.Get(0).(func(*ecs.RegisterContainerInstanceInput) *ecs.RegisterContainerInstanceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RegisterContainerInstanceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.RegisterContainerInstanceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterContainerInstanceRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) RegisterContainerInstanceRequest(_a0 *ecs.RegisterContainerInstanceInput) (*request.Request, *ecs.RegisterContainerInstanceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.RegisterContainerInstanceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.RegisterContainerInstanceOutput
	if rf, ok := ret.Get(1).(func(*ecs.RegisterContainerInstanceInput) *ecs.RegisterContainerInstanceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.RegisterContainerInstanceOutput)
		}
	}

	return r0, r1
}

// RegisterTaskDefinition provides a mock function with given fields: _a0
func (_m *ECSAPI) RegisterTaskDefinition(_a0 *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.RegisterTaskDefinitionOutput
	if rf, ok := ret.Get(0).(func(*ecs.RegisterTaskDefinitionInput) *ecs.RegisterTaskDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RegisterTaskDefinitionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.RegisterTaskDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTaskDefinitionRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) RegisterTaskDefinitionRequest(_a0 *ecs.RegisterTaskDefinitionInput) (*request.Request, *ecs.RegisterTaskDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.RegisterTaskDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.RegisterTaskDefinitionOutput
	if rf, ok := ret.Get(1).(func(*ecs.RegisterTaskDefinitionInput) *ecs.RegisterTaskDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.RegisterTaskDefinitionOutput)
		}
	}

	return r0, r1
}

// RunTask provides a mock function with given fields: _a0
func (_m *ECSAPI) RunTask(_a0 *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.RunTaskOutput
	if rf, ok := ret.Get(0).(func(*ecs.RunTaskInput) *ecs.RunTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RunTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.RunTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTaskRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) RunTaskRequest(_a0 *ecs.RunTaskInput) (*request.Request, *ecs.RunTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.RunTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.RunTaskOutput
	if rf, ok := ret.Get(1).(func(*ecs.RunTaskInput) *ecs.RunTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.RunTaskOutput)
		}
	}

	return r0, r1
}

// StartTask provides a mock function with given fields: _a0
func (_m *ECSAPI) StartTask(_a0 *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.StartTaskOutput
	if rf, ok := ret.Get(0).(func(*ecs.StartTaskInput) *ecs.StartTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.StartTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.StartTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTaskRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) StartTaskRequest(_a0 *ecs.StartTaskInput) (*request.Request, *ecs.StartTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.StartTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.StartTaskOutput
	if rf, ok := ret.Get(1).(func(*ecs.StartTaskInput) *ecs.StartTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.StartTaskOutput)
		}
	}

	return r0, r1
}

// StopTask provides a mock function with given fields: _a0
func (_m *ECSAPI) StopTask(_a0 *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.StopTaskOutput
	if rf, ok := ret.Get(0).(func(*ecs.StopTaskInput) *ecs.StopTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.StopTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.StopTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTaskRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) StopTaskRequest(_a0 *ecs.StopTaskInput) (*request.Request, *ecs.StopTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.StopTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.StopTaskOutput
	if rf, ok := ret.Get(1).(func(*ecs.StopTaskInput) *ecs.StopTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.StopTaskOutput)
		}
	}

	return r0, r1
}

// SubmitContainerStateChange provides a mock function with given fields: _a0
func (_m *ECSAPI) SubmitContainerStateChange(_a0 *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.SubmitContainerStateChangeOutput
	if rf, ok := ret.Get(0).(func(*ecs.SubmitContainerStateChangeInput) *ecs.SubmitContainerStateChangeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.SubmitContainerStateChangeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.SubmitContainerStateChangeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitContainerStateChangeRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) SubmitContainerStateChangeRequest(_a0 *ecs.SubmitContainerStateChangeInput) (*request.Request, *ecs.SubmitContainerStateChangeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.SubmitContainerStateChangeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.SubmitContainerStateChangeOutput
	if rf, ok := ret.Get(1).(func(*ecs.SubmitContainerStateChangeInput) *ecs.SubmitContainerStateChangeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.SubmitContainerStateChangeOutput)
		}
	}

	return r0, r1
}

// SubmitTaskStateChange provides a mock function with given fields: _a0
func (_m *ECSAPI) SubmitTaskStateChange(_a0 *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.SubmitTaskStateChangeOutput
	if rf, ok := ret.Get(0).(func(*ecs.SubmitTaskStateChangeInput) *ecs.SubmitTaskStateChangeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.SubmitTaskStateChangeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.SubmitTaskStateChangeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTaskStateChangeRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) SubmitTaskStateChangeRequest(_a0 *ecs.SubmitTaskStateChangeInput) (*request.Request, *ecs.SubmitTaskStateChangeOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.SubmitTaskStateChangeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.SubmitTaskStateChangeOutput
	if rf, ok := ret.Get(1).(func(*ecs.SubmitTaskStateChangeInput) *ecs.SubmitTaskStateChangeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.SubmitTaskStateChangeOutput)
		}
	}

	return r0, r1
}

// UpdateContainerAgent provides a mock function with given fields: _a0
func (_m *ECSAPI) UpdateContainerAgent(_a0 *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.UpdateContainerAgentOutput
	if rf, ok := ret.Get(0).(func(*ecs.UpdateContainerAgentInput) *ecs.UpdateContainerAgentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateContainerAgentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.UpdateContainerAgentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerAgentRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) UpdateContainerAgentRequest(_a0 *ecs.UpdateContainerAgentInput) (*request.Request, *ecs.UpdateContainerAgentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.UpdateContainerAgentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.UpdateContainerAgentOutput
	if rf, ok := ret.Get(1).(func(*ecs.UpdateContainerAgentInput) *ecs.UpdateContainerAgentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.UpdateContainerAgentOutput)
		}
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: _a0
func (_m *ECSAPI) UpdateService(_a0 *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *ecs.UpdateServiceOutput
	if rf, ok := ret.Get(0).(func(*ecs.UpdateServiceInput) *ecs.UpdateServiceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateServiceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ecs.UpdateServiceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceRequest provides a mock function with given fields: _a0
func (_m *ECSAPI) UpdateServiceRequest(_a0 *ecs.UpdateServiceInput) (*request.Request, *ecs.UpdateServiceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*ecs.UpdateServiceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *ecs.UpdateServiceOutput
	if rf, ok := ret.Get(1).(func(*ecs.UpdateServiceInput) *ecs.UpdateServiceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*ecs.UpdateServiceOutput)
		}
	}

	return r0, r1
}

// WaitUntilServicesInactive provides a mock function with given fields: _a0
func (_m *ECSAPI) WaitUntilServicesInactive(_a0 *ecs.DescribeServicesInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.DescribeServicesInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilServicesStable provides a mock function with given fields: _a0
func (_m *ECSAPI) WaitUntilServicesStable(_a0 *ecs.DescribeServicesInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.DescribeServicesInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTasksRunning provides a mock function with given fields: _a0
func (_m *ECSAPI) WaitUntilTasksRunning(_a0 *ecs.DescribeTasksInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTasksInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTasksStopped provides a mock function with given fields: _a0
func (_m *ECSAPI) WaitUntilTasksStopped(_a0 *ecs.DescribeTasksInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ecs.DescribeTasksInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ ecsiface.ECSAPI = (*ECSAPI)(nil)
