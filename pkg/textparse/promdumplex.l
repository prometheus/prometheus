%{
// Copyright 2020 The Prometheus Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package textparse

import (
    "fmt"
)

// Lex is called by the parser generated by "go tool yacc" to obtain each
// token. The method is opened before the matching rules block and closed at
// the end of the file.
func (l *promDumpLexer) Lex() token {
    if l.i >= len(l.b) {
        return tEOF
    }
    c := l.b[l.i]
    l.start = l.i

%}

D     [0-9]
L     [a-zA-Z_]
M     [a-zA-Z_:]

%x sComment sMeta1 sMeta2 sLabels sLValue sValue sTimestamp sExemplar sEValue sETimestamp sMName

%yyc c
%yyn c = l.next()
%yyt l.state


%%

\0                                    return tEOF
\n                                    l.state = sInit; return tLinebreak
\{                                    l.state = sLabels; return tBraceOpen
<*>[ \t]+                             return tWhitespace

<sLabels>__name__                     l.state = sMName; return tMNameLabel
<sMName>=                             return tEqual
<sMName>\"{M}({M}|{D})*\"             l.state = sLabels; return tMName

<sLabels>\}                           l.state = sValue; return tBraceClose
<sLabels>,                            return tComma
<sLabels>{L}({L}|{D})*                return tLName
<sLabels>=                            l.state = sLValue; return tEqual
<sLValue>\"(\\.|[^\\"])*\"            l.state = sLabels; return tLValue
<sValue>[^{ \t\n]+                    l.state = sTimestamp; return tValue
<sTimestamp>{D}+                      return tTimestamp
<sTimestamp>\n                        l.state = sInit; return tLinebreak

<sComment>.                           return tInvalid
<sMeta1>.                             return tInvalid
<sMeta2>.                             return tInvalid
<sExemplar>.                          return tInvalid
<sEValue>.                            return tInvalid
<sETimestamp>.                        return tInvalid

%%
}