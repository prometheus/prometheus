package cppbridge_test

import (
	"testing"

	"github.com/prometheus/prometheus/pp/go/cppbridge"
	"github.com/prometheus/prometheus/pp/go/model"
	"github.com/stretchr/testify/suite"
)

type IndexWriterSuite struct {
	suite.Suite
	lssStorage *cppbridge.LabelSetStorage
	writer     *cppbridge.IndexWriter
}

func (s *IndexWriterSuite) setLabelSets(label_sets []model.LabelSet) {
	for _, label_set := range label_sets {
		s.lssStorage.FindOrEmplace(label_set)
	}
}

func (s *IndexWriterSuite) writePostings(max_batch_size uint32) []byte {
	var bytes []byte
	for {
		data, has_more_data := s.writer.WriteNextPostingsBatch(max_batch_size)
		bytes = append(bytes, data...)
		if !has_more_data {
			break
		}
	}
	return bytes
}

func TestIndexWriterSuite(t *testing.T) {
	suite.Run(t, new(IndexWriterSuite))
}

func (s *IndexWriterSuite) SetupTest() {
	s.lssStorage = cppbridge.NewQueryableLssStorage()
}

func (s *IndexWriterSuite) TestWriteFullIndex() {
	// Arrange
	s.setLabelSets([]model.LabelSet{
		model.NewLabelSetBuilder().Set("job", "cron").Set("server", "localhost").Set("process", "php").Build(),
		model.NewLabelSetBuilder().Set("job", "cro1").Set("server", "127.0.0.1").Set("process", "nodejs").Build(),
		model.NewLabelSetBuilder().Set("joa", "cron").Set("server", "127.0.0.1").Set("process", "nodejs").Build(),
	})

	chunk_metadata_list := [][]cppbridge.ChunkMetadata{
		{
			{MinTimestamp: 1000, MaxTimestamp: 2001, Reference: 0},
			{MinTimestamp: 2002, MaxTimestamp: 4004, Reference: 100},
		},
		{
			{MinTimestamp: 1000, MaxTimestamp: 2001, Reference: 225},
			{MinTimestamp: 2002, MaxTimestamp: 4004, Reference: 325},
		},
		{
			{MinTimestamp: 1000, MaxTimestamp: 2001, Reference: 450},
			{MinTimestamp: 2002, MaxTimestamp: 4004, Reference: 550},
		},
	}
	s.writer = cppbridge.NewIndexWriter(s.lssStorage)

	// Act
	index := append([]byte(nil), s.writer.WriteHeader()...)
	index = append(index, s.writer.WriteSymbols()...)
	index = append(index, s.writer.WriteSeries(2, chunk_metadata_list[2])...)
	index = append(index, s.writer.WriteSeries(1, chunk_metadata_list[1])...)
	index = append(index, s.writer.WriteSeries(0, chunk_metadata_list[0])...)
	index = append(index, s.writer.WriteLabelIndices()...)
	index = append(index, s.writePostings(16)...)
	index = append(index, s.writer.WriteLabelIndicesTable()...)
	index = append(index, s.writer.WritePostingsTableOffsets()...)
	index = append(index, s.writer.WriteTableOfContents()...)

	// Assert
	s.Equal([]byte{
		0xba, 0xaa, 0xd7, 0x00, 0x02, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x09, 0x31,
		0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x04, 0x63, 0x72, 0x6f, 0x31, 0x04, 0x63, 0x72,
		0x6f, 0x6e, 0x03, 0x6a, 0x6f, 0x61, 0x03, 0x6a, 0x6f, 0x62, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
		0x68, 0x6f, 0x73, 0x74, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0x03, 0x70, 0x68, 0x70, 0x07,
		0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x13, 0x05,
		0xdf, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x03, 0x04, 0x03, 0x09, 0x07, 0x0a, 0x01, 0x02, 0xd0, 0x0f, 0xe9, 0x07, 0xc2, 0x03, 0x01,
		0xd2, 0x0f, 0xc8, 0x01, 0xbb, 0xdd, 0xca, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x13, 0x03, 0x05, 0x02, 0x09, 0x07, 0x0a, 0x01, 0x02, 0xd0, 0x0f, 0xe9, 0x07, 0xe1, 0x01, 0x01,
		0xd2, 0x0f, 0xc8, 0x01, 0xb5, 0x82, 0x42, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x12, 0x03, 0x05, 0x03, 0x09, 0x08, 0x0a, 0x06, 0x02, 0xd0, 0x0f, 0xe9, 0x07, 0x00, 0x01, 0xd2,
		0x0f, 0xc8, 0x01, 0x4e, 0x6b, 0x95, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
		0xf4, 0x1f, 0xff, 0x4d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x41, 0x54, 0x42, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08,
		0xbd, 0x9c, 0x2e, 0x65, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x81, 0x83, 0xf0, 0xaa, 0x00, 0x00, 0x00, 0x10,
		0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0a,
		0x8e, 0xdd, 0xe9, 0xbe, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06,
		0x92, 0x98, 0x3a, 0xce, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08,
		0x3e, 0xe0, 0x85, 0xe9, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a,
		0xdf, 0xdb, 0xf5, 0x1e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06,
		0x00, 0x00, 0x00, 0x08, 0xdc, 0x4f, 0x56, 0x1b, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x0a, 0xdf, 0xdb, 0xf5, 0x1e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0xdc, 0x4f, 0x56, 0x1b, 0x00, 0x00, 0x00, 0x08,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0xdf, 0xdb, 0xf5, 0x1e, 0x00, 0x00, 0x00, 0x27,
		0x00, 0x00, 0x00, 0x04, 0x01, 0x03, 0x6a, 0x6f, 0x61, 0xc0, 0x01, 0x01, 0x03, 0x6a, 0x6f, 0x62,
		0xd4, 0x01, 0x01, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0xec, 0x01, 0x01, 0x06, 0x73,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x84, 0x02, 0x70, 0x31, 0xb3, 0xe3, 0x00, 0x00, 0x00, 0x76, 0x00,
		0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x02, 0x03, 0x6a, 0x6f, 0x61, 0x04, 0x63, 0x72,
		0x6f, 0x6e, 0xb4, 0x02, 0x02, 0x03, 0x6a, 0x6f, 0x62, 0x04, 0x63, 0x72, 0x6f, 0x31, 0xc4, 0x02,
		0x02, 0x03, 0x6a, 0x6f, 0x62, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0xd4, 0x02, 0x02, 0x07, 0x70, 0x72,
		0x6f, 0x63, 0x65, 0x73, 0x73, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x6a, 0x73, 0xe4, 0x02, 0x02, 0x07,
		0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x03, 0x70, 0x68, 0x70, 0xf8, 0x02, 0x02, 0x06, 0x73,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x88,
		0x03, 0x02, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
		0x6f, 0x73, 0x74, 0x9c, 0x03, 0x37, 0x5d, 0x58, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
		0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xdb, 0xe1, 0x3a, 0xf5, 0x9b}, index)
}
