/* Generated by re2c */
#include "tokenizer.h"

enum YYCONDTYPE {
  yycinit,
  yyccomment,
  yycmeta_name,
  yycmeta_text_with_leading_spaces,
  yycmeta_text,
  yyclabels,
  yyclabel_value,
  yycvalue,
  yyctimestamp,
};

namespace PromPP::Prometheus::textparse {

Tokenizer::Tokenizer() : condition_{yycinit} {}

Tokenizer::Tokenizer(std::string_view str)
    : cursor_ptr_(str.data()), limit_ptr_(str.data() + str.size()), marker_ptr_(str.data()), token_ptr_(str.data()), condition_{yycinit} {}

void Tokenizer::tokenize(std::string_view str) noexcept {
  cursor_ptr_ = str.data();
  limit_ptr_ = str.data() + str.size();
  marker_ptr_ = str.data();
  token_ptr_ = str.data();

  condition_ = yycinit;
}

Tokenizer::Token Tokenizer::consume_comment() noexcept {
  do {
    if (*cursor_ptr_ == '\n') {
      condition_ = yycinit;
      return Token::kComment;
    }
  } while (++cursor_ptr_ != limit_ptr_);

  return Token::kEOF;
}

Tokenizer::Token Tokenizer::next_impl() noexcept {
  token_ptr_ = cursor_ptr_;

  {
    char yych;
    switch (condition_) {
      case yycinit:
        goto yyc_init;
      case yyccomment:
        goto yyc_comment;
      case yycmeta_name:
        goto yyc_meta_name;
      case yycmeta_text_with_leading_spaces:
        goto yyc_meta_text_with_leading_spaces;
      case yycmeta_text:
        goto yyc_meta_text;
      case yyclabels:
        goto yyc_labels;
      case yyclabel_value:
        goto yyc_label_value;
      case yycvalue:
        goto yyc_value;
      case yyctimestamp:
        goto yyc_timestamp;
    }
  /* *********************************** */
  yyc_init:
    if ((limit_ptr_ - cursor_ptr_) < 2) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case 0x00:
        goto yy2;
      case '\t':
      case ' ':
        goto yy3;
      case '\n':
        goto yy5;
      case '#':
        goto yy6;
      case ':':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy8;
      case '{':
        goto yy10;
      default:
        goto yy1;
    }
  yy1: { return Token::kInvalid; }
  yy2:
    ++cursor_ptr_;
    { return Token::kEOF; }
  yy3:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy3;
      default:
        goto yy4;
    }
  yy4: { return Token::kWhitespace; }
  yy5:
    ++cursor_ptr_;
    { return Token::kLinebreak; }
  yy6:
    yych = *++cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy11;
      default:
        goto yy7;
    }
  yy7: {
    token_ptr_ = cursor_ptr_;
    return consume_comment();
  }
  yy8:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy8;
      default:
        goto yy9;
    }
  yy9:
    condition_ = yycvalue;
    { return Token::kMetricName; }
  yy10:
    ++cursor_ptr_;
    condition_ = yyclabels;
    { return Token::kBraceOpen; }
  yy11:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy11;
      default:
        goto yy12;
    }
  yy12:
    condition_ = yyccomment;
    { token_ptr_ = cursor_ptr_; }
  /* *********************************** */
  yyc_comment:
    if ((limit_ptr_ - cursor_ptr_) < 5) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *(marker_ptr_ = cursor_ptr_);
    switch (yych) {
      case '\t':
      case ' ':
        goto yy15;
      case 'H':
        goto yy17;
      case 'T':
        goto yy19;
      default:
        goto yy14;
    }
  yy14:
    condition_ = yycinit;
    { return consume_comment(); }
  yy15:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy15;
      default:
        goto yy16;
    }
  yy16: { return Token::kWhitespace; }
  yy17:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'E':
        goto yy20;
      default:
        goto yy18;
    }
  yy18:
    cursor_ptr_ = marker_ptr_;
    goto yy14;
  yy19:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'Y':
        goto yy21;
      default:
        goto yy18;
    }
  yy20:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'L':
        goto yy22;
      default:
        goto yy18;
    }
  yy21:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'P':
        goto yy23;
      default:
        goto yy18;
    }
  yy22:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'P':
        goto yy24;
      default:
        goto yy18;
    }
  yy23:
    yych = *++cursor_ptr_;
    switch (yych) {
      case 'E':
        goto yy25;
      default:
        goto yy18;
    }
  yy24:
    yych = *++cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy26;
      default:
        goto yy18;
    }
  yy25:
    yych = *++cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy28;
      default:
        goto yy18;
    }
  yy26:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy26;
      default:
        goto yy27;
    }
  yy27:
    condition_ = yycmeta_name;
    { return Token::kHelp; }
  yy28:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy28;
      default:
        goto yy29;
    }
  yy29:
    condition_ = yycmeta_name;
    { return Token::kType; }
  /* *********************************** */
  yyc_meta_name:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *(marker_ptr_ = cursor_ptr_);
    switch (yych) {
      case '\t':
      case ' ':
        goto yy32;
      case '"':
        goto yy34;
      case ':':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy35;
      default:
        goto yy31;
    }
  yy31: { return Token::kInvalid; }
  yy32:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy32;
      default:
        goto yy33;
    }
  yy33: { return Token::kWhitespace; }
  yy34:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '"':
        goto yy37;
      case '\\':
        goto yy38;
      default:
        goto yy34;
    }
  yy35:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy35;
      default:
        goto yy36;
    }
  yy36:
    condition_ = yycmeta_text_with_leading_spaces;
    { return Token::kMetricName; }
  yy37:
    ++cursor_ptr_;
    condition_ = yycmeta_text_with_leading_spaces;
    { return Token::kMetricName; }
  yy38:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\n':
        goto yy39;
      default:
        goto yy34;
    }
  yy39:
    cursor_ptr_ = marker_ptr_;
    goto yy31;
  /* *********************************** */
  yyc_meta_text_with_leading_spaces:
    goto yy40;
  yy41:
    ++cursor_ptr_;
  yy40:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy41;
      default:
        goto yy42;
    }
  yy42:
    condition_ = yycmeta_text;
    { token_ptr_ = cursor_ptr_; }
  /* *********************************** */
  yyc_meta_text:
    goto yy43;
  yy44:
    ++cursor_ptr_;
  yy43:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\n':
        goto yy45;
      default:
        goto yy44;
    }
  yy45:
    condition_ = yycinit;
    { return Token::kText; }
  /* *********************************** */
  yyc_labels:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *(marker_ptr_ = cursor_ptr_);
    switch (yych) {
      case '\t':
      case ' ':
        goto yy48;
      case '"':
        goto yy50;
      case ',':
        goto yy51;
      case '=':
        goto yy52;
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy53;
      case '}':
        goto yy55;
      default:
        goto yy47;
    }
  yy47: { return Token::kInvalid; }
  yy48:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy48;
      default:
        goto yy49;
    }
  yy49: { return Token::kWhitespace; }
  yy50:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '"':
        goto yy56;
      case '\\':
        goto yy57;
      default:
        goto yy50;
    }
  yy51:
    ++cursor_ptr_;
    { return Token::kComma; }
  yy52:
    ++cursor_ptr_;
    condition_ = yyclabel_value;
    { return Token::kEqual; }
  yy53:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto yy53;
      default:
        goto yy54;
    }
  yy54: { return Token::kLabelName; }
  yy55:
    ++cursor_ptr_;
    condition_ = yycvalue;
    { return Token::kBraceClose; }
  yy56:
    ++cursor_ptr_;
    { return Token::kQuotedString; }
  yy57:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\n':
        goto yy58;
      default:
        goto yy50;
    }
  yy58:
    cursor_ptr_ = marker_ptr_;
    goto yy47;
  /* *********************************** */
  yyc_label_value:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *(marker_ptr_ = cursor_ptr_);
    switch (yych) {
      case '\t':
      case ' ':
        goto yy61;
      case '"':
        goto yy63;
      default:
        goto yy60;
    }
  yy60: { return Token::kInvalid; }
  yy61:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy61;
      default:
        goto yy62;
    }
  yy62: { return Token::kWhitespace; }
  yy63:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '"':
        goto yy64;
      case '\\':
        goto yy65;
      default:
        goto yy63;
    }
  yy64:
    ++cursor_ptr_;
    condition_ = yyclabels;
    { return Token::kLabelValue; }
  yy65:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\n':
        goto yy66;
      default:
        goto yy63;
    }
  yy66:
    cursor_ptr_ = marker_ptr_;
    goto yy60;
  /* *********************************** */
  yyc_value:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy71;
      case '\n':
        goto yy68;
      case '{':
        goto yy73;
      default:
        goto yy69;
    }
  yy68: { return Token::kInvalid; }
  yy69:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case '\n':
      case ' ':
      case '{':
        goto yy70;
      default:
        goto yy69;
    }
  yy70:
    condition_ = yyctimestamp;
    { return Token::kValue; }
  yy71:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy71;
      default:
        goto yy72;
    }
  yy72: { return Token::kWhitespace; }
  yy73:
    ++cursor_ptr_;
    condition_ = yyclabels;
    { return Token::kBraceOpen; }
  /* *********************************** */
  yyc_timestamp:
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy76;
      case '\n':
        goto yy78;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto yy79;
      default:
        goto yy75;
    }
  yy75: { return Token::kInvalid; }
  yy76:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '\t':
      case ' ':
        goto yy76;
      default:
        goto yy77;
    }
  yy77: { return Token::kWhitespace; }
  yy78:
    ++cursor_ptr_;
    condition_ = yycinit;
    { return Token::kLinebreak; }
  yy79:
    ++cursor_ptr_;
    if (limit_ptr_ <= cursor_ptr_) {
      if (limit_ptr_ >= cursor_ptr_) {
        return Token::kEOF;
      }
    }
    yych = *cursor_ptr_;
    switch (yych) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        goto yy79;
      default:
        goto yy80;
    }
  yy80: { return Token::kTimestamp; }
  }
}

}  // namespace PromPP::Prometheus::textparse
