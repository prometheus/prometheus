// Copyright 2017 Prometheus Team
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package prometheus;

import "types.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "gogoproto/gogo.proto";

option go_package = "prompb";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;


service Admin {
  // Snapshot creates a snapshot of all current data into 'snapshots/<datetime>-<rand>' under
  // the TSDB's data directory.
  rpc TSDBSnapshot(TSDBSnapshotRequest) returns (TSDBSnapshotResponse) {
    option (google.api.http) = {
      post: "/v2/admin/tsdb/snapshot"
    };
  }

  // DeleteSeries deletes data for a selection of series in a time range.
  rpc DeleteSeries(SeriesDeleteRequest) returns (SeriesDeleteResponse) {
    option (google.api.http) = {
      post: "/v2/admin/tsdb/delete_series"
      body: "*"
    };
  }
}


message TSDBSnapshotRequest {
}

message TSDBSnapshotResponse {
  string name = 1;
}

message SeriesDeleteRequest {
  google.protobuf.Timestamp min_time = 1 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp max_time = 2 [(gogoproto.stdtime) = true];
  repeated LabelMatcher matchers     = 3 [(gogoproto.nullable) = false];
}

message SeriesDeleteResponse {
}

service Querying {
  // ListSeries lists all series matching one of the given label selectors.
  rpc ListSeries(ListSeriesRequest) returns (ListSeriesResponse);

  // ListLabelValues lists all known for a single label.
  rpc ListLabelValues(LabelValuesRequest) returns (LabelValuesResponse);

  // QueryAtTime runs a query at a single point in time.
  rpc QueryAtTime(QueryAtTimeRequest) returns (QueryResponse);

  // QueryOverRange runs a query at a series of times of in a time range.
  rpc QueryOverRange(QueryOverRangeRequest) returns (QueryResponse);
}

message ListSeriesRequest {
  google.protobuf.Timestamp start_time = 1 [(gogoproto.stdtime) = true];
  google.protobuf.Timestamp end_time   = 2 [(gogoproto.stdtime) = true];
  repeated SeriesMatcher matchers      = 3 [(gogoproto.nullable) = false];
}

message ListSeriesResponse {
  repeated Labels series = 1;
}

message LabelValuesRequest {
  string name = 1;
}
message LabelValuesResponse {
  repeated string values = 1;
}

message QueryAtTimeRequest {
  google.protobuf.Timestamp time   = 1 [(gogoproto.stdtime) = true];
  google.protobuf.Duration timeout = 2 [(gogoproto.stdduration) = true];
  string query                     = 3;
}
message QueryOverRangeRequest {
  google.protobuf.Timestamp start_time   = 1 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Timestamp end_time     = 2 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  google.protobuf.Duration step          = 3 [(gogoproto.stdduration) = true, (gogoproto.nullable) = false];
  google.protobuf.Duration timeout       = 4 [(gogoproto.stdduration) = true];
  string query                           = 5;
}

message QueryResponse {
  oneof data {
    Matrix matrix = 1;
    Vector vector = 2;
    Sample scalar = 3;
    StringSample string = 4;
  };
}
