// Code generated by goyacc -o promql/generated_parser.y.go promql/generated_parser.y. DO NOT EDIT.

//line promql/generated_parser.y:15
package promql

import __yyfmt__ "fmt"

//line promql/generated_parser.y:15

import (
	"math"
	"sort"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/pkg/labels"
	"github.com/prometheus/prometheus/pkg/value"
)

//line promql/generated_parser.y:28
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	strings  []string
	series   []sequenceValue
	uint     uint64
	float    float64
	string   string
	duration time.Duration
}

const ASSIGN = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const METRIC_IDENTIFIER = 57358
const NUMBER = 57359
const RIGHT_BRACE = 57360
const RIGHT_BRACKET = 57361
const RIGHT_PAREN = 57362
const SEMICOLON = 57363
const SPACE = 57364
const STRING = 57365
const TIMES = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const EQL = 57370
const EQL_REGEX = 57371
const GTE = 57372
const GTR = 57373
const LAND = 57374
const LOR = 57375
const LSS = 57376
const LTE = 57377
const LUNLESS = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const NEQ_REGEX = 57382
const POW = 57383
const SUB = 57384
const operatorsEnd = 57385
const aggregatorsStart = 57386
const AVG = 57387
const BOTTOMK = 57388
const COUNT = 57389
const COUNT_VALUES = 57390
const MAX = 57391
const MIN = 57392
const QUANTILE = 57393
const STDDEV = 57394
const STDVAR = 57395
const SUM = 57396
const TOPK = 57397
const aggregatorsEnd = 57398
const keywordsStart = 57399
const BOOL = 57400
const BY = 57401
const GROUP_LEFT = 57402
const GROUP_RIGHT = 57403
const IGNORING = 57404
const OFFSET = 57405
const ON = 57406
const WITHOUT = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_LABELS = 57410
const START_METRIC = 57411
const START_GROUPING_LABELS = 57412
const START_SERIES_DESCRIPTION = 57413
const START_EXPRESSION = 57414
const START_METRIC_SELECTOR = 57415
const startSymbolsEnd = 57416

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ASSIGN",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQL",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"startSymbolsStart",
	"START_LABELS",
	"START_METRIC",
	"START_GROUPING_LABELS",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/generated_parser.y:646

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 22,
	1, 152,
	10, 152,
	22, 152,
	-2, 0,
	-1, 199,
	12, 48,
	13, 48,
	16, 48,
	17, 48,
	23, 48,
	26, 48,
	42, 48,
	45, 48,
	46, 48,
	47, 48,
	48, 48,
	49, 48,
	50, 48,
	51, 48,
	52, 48,
	53, 48,
	54, 48,
	55, 48,
	-2, 0,
	-1, 200,
	12, 48,
	13, 48,
	16, 48,
	17, 48,
	23, 48,
	26, 48,
	42, 48,
	45, 48,
	46, 48,
	47, 48,
	48, 48,
	49, 48,
	50, 48,
	51, 48,
	52, 48,
	53, 48,
	54, 48,
	55, 48,
	-2, 0,
	-1, 216,
	19, 126,
	-2, 0,
	-1, 231,
	19, 127,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 446

var yyAct = [...]int{

	234, 24, 167, 228, 227, 193, 73, 68, 18, 62,
	121, 123, 197, 126, 198, 199, 200, 150, 117, 127,
	41, 38, 141, 10, 237, 220, 75, 145, 185, 238,
	105, 103, 117, 221, 125, 194, 76, 181, 118, 119,
	77, 104, 102, 189, 186, 101, 106, 122, 140, 184,
	191, 195, 8, 219, 124, 46, 78, 79, 180, 101,
	80, 120, 235, 122, 194, 146, 218, 116, 46, 81,
	89, 82, 90, 85, 84, 91, 86, 87, 83, 88,
	195, 116, 98, 93, 96, 97, 95, 92, 94, 117,
	11, 126, 16, 11, 17, 170, 15, 127, 9, 139,
	239, 105, 103, 107, 138, 111, 112, 113, 115, 110,
	109, 114, 104, 102, 108, 137, 101, 106, 2, 3,
	4, 5, 6, 7, 173, 217, 100, 144, 20, 216,
	176, 177, 143, 70, 174, 130, 175, 232, 116, 179,
	129, 19, 215, 69, 169, 142, 183, 21, 196, 182,
	187, 128, 1, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 192, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 230, 64, 70, 117, 39, 132, 16, 17,
	14, 27, 15, 63, 69, 31, 222, 75, 103, 178,
	67, 225, 226, 59, 65, 229, 33, 76, 104, 102,
	64, 77, 101, 133, 135, 72, 223, 224, 30, 231,
	63, 233, 236, 168, 134, 136, 61, 78, 79, 166,
	169, 80, 25, 40, 116, 149, 165, 13, 240, 13,
	81, 89, 82, 90, 85, 84, 91, 86, 87, 83,
	88, 117, 28, 98, 93, 96, 97, 95, 92, 94,
	12, 29, 32, 105, 103, 107, 22, 111, 112, 113,
	115, 110, 109, 114, 104, 102, 108, 147, 101, 106,
	171, 117, 34, 148, 26, 35, 190, 99, 188, 71,
	66, 37, 74, 105, 103, 107, 131, 111, 112, 113,
	116, 110, 109, 114, 104, 102, 108, 43, 101, 106,
	60, 117, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 105, 103, 107, 0, 111, 112, 0,
	116, 110, 109, 0, 104, 102, 108, 0, 101, 106,
	42, 11, 0, 36, 15, 46, 0, 0, 172, 0,
	0, 47, 0, 0, 44, 0, 23, 0, 42, 11,
	116, 36, 15, 46, 0, 0, 0, 0, 0, 47,
	45, 0, 44, 48, 56, 49, 57, 52, 51, 58,
	53, 54, 50, 55, 0, 0, 0, 0, 45, 0,
	0, 48, 56, 49, 57, 52, 51, 58, 53, 54,
	50, 55, 42, 11, 0, 36, 15, 46, 0, 0,
	0, 0, 0, 47, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 48, 56, 49, 57, 52,
	51, 58, 53, 54, 50, 55,
}
var yyPact = [...]int{

	50, 88, 77, 176, 126, 176, 346, 80, -1000, -1000,
	-1000, 208, -1000, 81, -1000, -1000, -1000, 182, -1000, 195,
	-1000, -1000, 124, -1000, 237, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 390, 390, -1000, -1000,
	77, -1000, 48, 32, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	133, -1000, -1000, 185, -1000, -1000, 97, -1000, -1000, 20,
	-1000, 125, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5,
	-1000, -41, -41, -41, -41, -41, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, 227, 221, 75, 18,
	-1000, -1000, 328, 48, -46, -1000, 126, 126, -1000, 181,
	-1000, 35, -1000, -1000, -1000, -1000, -1000, -1000, 131, -1000,
	26, -1000, -1000, 24, -1000, 38, 390, -1000, -50, -45,
	-1000, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, -1000, -1000, 123, -1000, -1000,
	-1000, 46, -1000, 237, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1,
	9, -1000, -1000, -1000, 51, 51, 18, 126, 126, 126,
	126, 18, 18, 18, 171, 171, 4, 4, 4, 4,
	4, 4, 297, 297, 267, -1000, 135, -1000, -1000, 390,
	45, 45, 0, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10, 98, -1000, 237, -1000, -1000, -1000, 45, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 310, 20, 9, 307, 6, 296, 292, 233, 291,
	190, 290, 260, 7, 289, 3, 4, 288, 287, 0,
	21, 286, 5, 285, 11, 65, 284, 283, 1, 282,
	280, 10, 277, 262, 261, 252, 235, 232, 218, 206,
	191, 195, 186, 2, 182, 152, 147,
}
var yyR1 = [...]int{

	0, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 40, 9, 9, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 25,
	27, 27, 36, 36, 32, 32, 32, 32, 16, 16,
	37, 34, 38, 42, 2, 2, 2, 1, 1, 1,
	3, 3, 3, 3, 6, 6, 6, 6, 12, 12,
	8, 8, 10, 10, 10, 10, 11, 11, 11, 13,
	13, 13, 13, 15, 15, 15, 15, 14, 14, 14,
	5, 5, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 35, 35, 41, 41, 41,
	33, 39, 39, 39, 39, 39, 44, 44, 43, 29,
	31, 31, 30, 30, 23, 23, 23, 23, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 24,
	24, 46, 18, 18, 18, 18, 17, 17, 17, 17,
	17, 19, 22, 22, 21, 21, 21, 20,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
	0, 1, 3, 3, 1, 1, 3, 3, 0, 1,
	3, 1, 1, 1, 3, 4, 2, 3, 1, 2,
	3, 3, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 3, 4, 2, 0, 3, 1, 2, 3,
	3, 2, 1, 3, 4, 2, 1, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 2, 1, 1,
	4, 6, 6, 5, 4, 3, 0, 1, 1, 2,
	3, 2, 3, 1, 3, 3, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 0, 3, 2, 1, 1, 3, 1, 3,
	4, 1, 2, 2, 1, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -45, 68, 69, 70, 71, 72, 73, 2, 10,
	-2, 13, -12, -8, -10, 16, 12, 13, -15, 15,
	2, -46, -12, 10, -28, -37, -26, -40, -35, -34,
	-38, -41, -33, -39, -29, -23, 15, -9, -20, -42,
	-8, -2, 12, -4, 26, 42, 17, 23, 45, 47,
	54, 50, 49, 52, 53, 55, 46, 48, 51, -41,
	-1, 18, -3, 12, 2, -10, -11, 18, -13, 12,
	2, -14, 20, -5, -7, 2, 12, 16, 32, 33,
	36, 45, 47, 54, 50, 49, 52, 53, 55, 46,
	48, 51, 63, 59, 64, 62, 60, 61, 58, -18,
	2, 41, 38, 27, 37, 26, 42, 28, 39, 35,
	34, 30, 31, 32, 36, 33, 63, 14, -28, -28,
	-2, -31, 15, -24, -31, 2, 59, 65, 18, 7,
	2, -6, 2, 28, 39, 29, 40, 18, 7, 2,
	28, 2, 20, 7, 2, 22, -25, -32, -27, -36,
	58, -25, -25, -25, -25, -25, -25, -25, -25, -25,
	-25, -25, -25, -25, -25, 9, 2, -43, 2, 9,
	20, -30, 20, -28, -31, -24, -15, -15, 18, -3,
	23, 2, 18, -13, 23, 2, 20, -5, -17, 5,
	-21, 12, -20, -22, 26, 42, -28, 62, 64, 60,
	61, -28, -28, -28, -28, -28, -28, -28, -28, -28,
	-28, -28, -28, -28, -28, 19, 6, 2, 20, 7,
	24, 24, -22, -20, -20, -15, -15, -16, -15, -16,
	-44, -43, 2, -28, -19, 17, -19, 24, 19, 2,
	-19,
}
var yyDef = [...]int{

	0, -2, 0, 75, 0, 75, 0, 0, 9, 8,
	1, 0, 2, 75, 69, 70, 71, 0, 3, 0,
	86, 4, -2, 5, 6, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 0, 0, 51, 52,
	118, 119, 71, 0, 22, 23, 167, 53, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 7,
	0, 56, 58, 0, 63, 68, 0, 74, 77, 0,
	82, 0, 85, 88, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 151,
	155, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 0, 0, 0, 21,
	117, 129, 0, 0, 136, 137, 0, 0, 54, 0,
	59, 0, 62, 64, 65, 66, 67, 72, 0, 78,
	0, 81, 83, 0, 89, 154, 0, 39, 44, 45,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 116, 0, 125, 128,
	50, 0, 131, 133, 134, 135, 149, 150, 55, 57,
	60, 61, 73, 76, 79, 80, 84, 87, 153, 156,
	158, 164, 165, 166, 0, 0, 24, 0, 0, -2,
	-2, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 120, -2, 124, 130, 0,
	0, 0, 0, 162, 163, 42, 43, 46, 49, 47,
	0, -2, 123, 132, 157, 161, 159, 0, 121, 122,
	160,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:102
		{
			yylex.(*parser).generatedParserResult.(*VectorSelector).LabelMatchers = yyDollar[2].matchers
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:104
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:106
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].strings
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:109
		{
			yylex.(*parser).errorf("no expression found in input")
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:111
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:113
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:116
		{
			yylex.(*parser).unexpected("", "")
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:136
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr)}
			}
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:155
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:157
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:159
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:161
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:163
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:165
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:167
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:169
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:171
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:173
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:175
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:177
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:179
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:181
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:183
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:195
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:200
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:209
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:214
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:225
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:231
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:240
		{
			yyVAL.strings = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:245
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:251
		{
			yyVAL.node = &NumberLiteral{yyDollar[1].float}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:256
		{
			yyVAL.node = &StringLiteral{yyDollar[1].string}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:261
		{
			yyVAL.string = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:266
		{
			yyVAL.matchers = yyDollar[2].matchers
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:268
		{
			yyVAL.matchers = yyDollar[2].matchers
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:270
		{
			yyVAL.matchers = []*labels.Matcher{}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:276
		{
			yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:278
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:280
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:285
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:287
		{
			yylex.(*parser).unexpected("label matching", "string")
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:289
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:291
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:295
		{
			yyVAL.item = yyDollar[1].item
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:296
		{
			yyVAL.item = yyDollar[1].item
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:297
		{
			yyVAL.item = yyDollar[1].item
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:298
		{
			yyVAL.item = yyDollar[1].item
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:304
		{
			yyVAL.labels = append(yyDollar[2].labels, labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val})
			sort.Sort(yyVAL.labels)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:306
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:312
		{
			yyVAL.item = yyDollar[1].item
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:313
		{
			yyVAL.item = yyDollar[1].item
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:317
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:319
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:321
		{
			yyVAL.labels = labels.New()
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:323
		{
			yyVAL.labels = labels.New()
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:328
		{
			yyVAL.labels = append(yyDollar[1].labels, yyDollar[3].label)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:330
		{
			yyVAL.labels = []labels.Label{yyDollar[1].label}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:332
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:338
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:340
		{
			yylex.(*parser).unexpected("label set", "string")
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:342
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:344
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:349
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:351
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:353
		{
			yyVAL.strings = []string{}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:355
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:361
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:363
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:365
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:370
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:377
		{
			yylex.(*parser).unexpected("grouping opts", "label")
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:411
		{
			offset, err := parseDuration(yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).error(err)
			}
			yylex.(*parser).addOffset(yyDollar[1].node, offset)
			yyVAL.node = yyDollar[1].node
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:420
		{
			yylex.(*parser).unexpected("offset", "duration")
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:425
		{
			yyVAL.node = yylex.(*parser).newVectorSelector(yyDollar[1].item.Val, yyDollar[2].matchers)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:427
		{
			yyVAL.node = yylex.(*parser).newVectorSelector(yyDollar[1].item.Val, nil)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:429
		{
			yyVAL.node = yylex.(*parser).newVectorSelector("", yyDollar[1].matchers)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:434
		{
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				yylex.(*parser).errorf("matrix selectors only allowed for vector selectors")
			}
			if vs.Offset != 0 {
				yylex.(*parser).errorf("no offset modifiers allowed before range selector")
			}
			yyVAL.node = &MatrixSelector{
				Name:          vs.Name,
				Offset:        vs.Offset,
				LabelMatchers: vs.LabelMatchers,
				Range:         yyDollar[3].duration,
			}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/generated_parser.y:453
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,
			}
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/generated_parser.y:461
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/generated_parser.y:463
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:465
		{
			yylex.(*parser).unexpected("subquery or matrix selector", "\":\" or \"]\"")
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:467
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:473
		{
			yyVAL.duration = 0
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:479
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).error(err)
			}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:490
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).errorf("unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
			}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:504
		{
			yyVAL.node = yyDollar[2].node
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:506
		{
			yyVAL.node = Expressions{}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:511
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:513
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:520
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:522
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:524
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:526
		{
			yylex.(*parser).unexpected("aggregation", "")
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:545
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:551
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:561
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:571
		{
			yyVAL.series = []sequenceValue{}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:573
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:575
		{
			yyVAL.series = yyDollar[1].series
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:577
		{
			yylex.(*parser).unexpected("series values", "")
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:582
		{
			yyVAL.series = []sequenceValue{{omitted: true}}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:584
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{omitted: true})
			}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:591
		{
			yyVAL.series = []sequenceValue{{value: yyDollar[1].float}}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:593
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{value: yyDollar[1].float})
			}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:600
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:609
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).errorf("invalid repetition in series values: %s", err)
			}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:620
		{
			yyVAL.float = yyDollar[2].float
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:622
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:627
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:634
		{
			yyVAL.float = yyDollar[1].float
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:636
		{
			yyVAL.float = yyDollar[1].float
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:643
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	}
	goto yystack /* stack new state and value */
}
