// Code generated by goyacc -o promql/generated_parser.y.go promql/generated_parser.y. DO NOT EDIT.

//line promql/generated_parser.y:15
package promql

import __yyfmt__ "fmt"

//line promql/generated_parser.y:15

import (
	"math"
	"sort"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/pkg/labels"
	"github.com/prometheus/prometheus/pkg/value"
)

//line promql/generated_parser.y:28
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	strings  []string
	series   []sequenceValue
	uint     uint64
	float    float64
	string   string
	duration time.Duration
}

const ERROR = 57346
const EOF = 57347
const COMMENT = 57348
const IDENTIFIER = 57349
const METRIC_IDENTIFIER = 57350
const LEFT_PAREN = 57351
const RIGHT_PAREN = 57352
const LEFT_BRACE = 57353
const RIGHT_BRACE = 57354
const LEFT_BRACKET = 57355
const RIGHT_BRACKET = 57356
const COMMA = 57357
const ASSIGN = 57358
const COLON = 57359
const SEMICOLON = 57360
const STRING = 57361
const NUMBER = 57362
const DURATION = 57363
const BLANK = 57364
const TIMES = 57365
const SPACE = 57366
const operatorsStart = 57367
const SUB = 57368
const ADD = 57369
const MUL = 57370
const MOD = 57371
const DIV = 57372
const LAND = 57373
const LOR = 57374
const LUNLESS = 57375
const EQL = 57376
const NEQ = 57377
const LTE = 57378
const LSS = 57379
const GTE = 57380
const GTR = 57381
const EQL_REGEX = 57382
const NEQ_REGEX = 57383
const POW = 57384
const operatorsEnd = 57385
const aggregatorsStart = 57386
const AVG = 57387
const COUNT = 57388
const SUM = 57389
const MIN = 57390
const MAX = 57391
const STDDEV = 57392
const STDVAR = 57393
const TOPK = 57394
const BOTTOMK = 57395
const COUNT_VALUES = 57396
const QUANTILE = 57397
const aggregatorsEnd = 57398
const keywordsStart = 57399
const OFFSET = 57400
const BY = 57401
const WITHOUT = 57402
const ON = 57403
const IGNORING = 57404
const GROUP_LEFT = 57405
const GROUP_RIGHT = 57406
const BOOL = 57407
const keywordsEnd = 57408
const startSymbolsStart = 57409
const START_LABELS = 57410
const START_METRIC = 57411
const START_GROUPING_LABELS = 57412
const START_SERIES_DESCRIPTION = 57413
const START_EXPRESSION = 57414
const START_METRIC_SELECTOR = 57415
const startSymbolsEnd = 57416

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"COMMENT",
	"IDENTIFIER",
	"METRIC_IDENTIFIER",
	"LEFT_PAREN",
	"RIGHT_PAREN",
	"LEFT_BRACE",
	"RIGHT_BRACE",
	"LEFT_BRACKET",
	"RIGHT_BRACKET",
	"COMMA",
	"ASSIGN",
	"COLON",
	"SEMICOLON",
	"STRING",
	"NUMBER",
	"DURATION",
	"BLANK",
	"TIMES",
	"SPACE",
	"operatorsStart",
	"SUB",
	"ADD",
	"MUL",
	"MOD",
	"DIV",
	"LAND",
	"LOR",
	"LUNLESS",
	"EQL",
	"NEQ",
	"LTE",
	"LSS",
	"GTE",
	"GTR",
	"EQL_REGEX",
	"NEQ_REGEX",
	"POW",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"COUNT",
	"SUM",
	"MIN",
	"MAX",
	"STDDEV",
	"STDVAR",
	"TOPK",
	"BOTTOMK",
	"COUNT_VALUES",
	"QUANTILE",
	"aggregatorsEnd",
	"keywordsStart",
	"OFFSET",
	"BY",
	"WITHOUT",
	"ON",
	"IGNORING",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"BOOL",
	"keywordsEnd",
	"startSymbolsStart",
	"START_LABELS",
	"START_METRIC",
	"START_GROUPING_LABELS",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/generated_parser.y:687

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 22,
	1, 149,
	5, 149,
	24, 149,
	-2, 0,
	-1, 196,
	7, 48,
	8, 48,
	11, 48,
	19, 48,
	20, 48,
	26, 48,
	27, 48,
	45, 48,
	46, 48,
	47, 48,
	48, 48,
	49, 48,
	50, 48,
	51, 48,
	52, 48,
	53, 48,
	54, 48,
	55, 48,
	-2, 0,
	-1, 197,
	7, 48,
	8, 48,
	11, 48,
	19, 48,
	20, 48,
	26, 48,
	27, 48,
	45, 48,
	46, 48,
	47, 48,
	48, 48,
	49, 48,
	50, 48,
	51, 48,
	52, 48,
	53, 48,
	54, 48,
	55, 48,
	-2, 0,
	-1, 214,
	14, 125,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 411

var yyAct = [...]int{

	237, 24, 167, 123, 227, 38, 192, 226, 172, 18,
	68, 62, 196, 197, 141, 150, 199, 198, 117, 126,
	127, 117, 8, 73, 75, 145, 240, 221, 169, 76,
	77, 238, 185, 102, 104, 103, 46, 41, 119, 120,
	10, 222, 232, 168, 194, 193, 140, 101, 241, 117,
	101, 216, 125, 78, 79, 80, 118, 11, 17, 124,
	173, 169, 169, 116, 122, 146, 116, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 91, 121, 171,
	92, 93, 117, 94, 95, 96, 97, 98, 2, 3,
	4, 5, 6, 7, 116, 106, 105, 102, 104, 103,
	113, 115, 114, 107, 108, 109, 110, 111, 112, 126,
	127, 101, 184, 235, 220, 190, 31, 166, 218, 218,
	180, 170, 9, 215, 59, 100, 21, 116, 46, 183,
	188, 175, 176, 174, 194, 193, 165, 179, 214, 144,
	217, 178, 16, 15, 12, 218, 11, 142, 195, 182,
	22, 191, 143, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 186, 151, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 219, 75, 139, 130, 40, 14, 76, 77,
	13, 72, 13, 117, 137, 128, 223, 138, 129, 224,
	225, 65, 1, 229, 230, 228, 106, 105, 102, 104,
	103, 70, 78, 79, 80, 231, 69, 233, 20, 39,
	234, 181, 101, 239, 236, 19, 81, 82, 83, 84,
	85, 86, 87, 88, 89, 90, 91, 117, 116, 92,
	93, 242, 94, 95, 96, 97, 98, 148, 149, 147,
	106, 105, 102, 104, 103, 113, 115, 114, 107, 108,
	109, 110, 111, 112, 132, 23, 101, 42, 15, 36,
	35, 11, 34, 64, 33, 32, 30, 29, 63, 47,
	46, 28, 116, 177, 70, 64, 45, 44, 26, 69,
	63, 27, 25, 189, 67, 61, 133, 134, 187, 99,
	16, 15, 135, 136, 17, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 42, 15, 36, 71,
	11, 66, 43, 37, 117, 74, 131, 60, 47, 46,
	0, 0, 0, 0, 0, 45, 44, 106, 105, 102,
	104, 103, 113, 0, 114, 107, 108, 109, 110, 111,
	112, 0, 0, 101, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 117, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 105,
	102, 104, 103, 0, 0, 0, 107, 108, 109, 110,
	111, 112, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	116,
}
var yyPact = [...]int{

	20, 117, 46, 293, 216, 293, 260, 135, -1000, -1000,
	-1000, 283, -1000, 47, -1000, -1000, -1000, 282, -1000, 181,
	-1000, -1000, 123, -1000, 224, -1000, -1000, -1000, -1000, -1000,
	-1000, 43, -1000, -1000, -1000, -1000, 309, 309, -1000, -1000,
	46, -1000, 55, 50, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	183, -1000, -1000, 262, -1000, -1000, 182, -1000, -1000, 12,
	-1000, 137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1,
	-1000, -50, -50, -50, -50, -50, -50, -50, -50, -50,
	-50, -50, -50, -50, -50, -50, 115, 41, 7, 69,
	36, -1000, -1000, 51, -1000, -1000, 216, 216, -1000, 271,
	-1000, 118, -1000, -1000, -1000, -1000, -1000, -1000, 209, -1000,
	110, -1000, -1000, 22, -1000, 108, 309, -1000, -51, -45,
	-1000, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, -1000, -1000, 121, -1000, -1000,
	37, -1000, 130, -1000, 104, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 4, 18,
	-1000, -1000, -1000, 16, 16, 36, 216, 216, 216, 216,
	8, 8, 8, 5, 5, 180, 180, 180, 180, 180,
	180, 352, 352, 311, 40, -1000, -1000, -1000, 309, 103,
	-40, 11, 11, 3, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, -1000, 224, -1000, -1000, -1000, -1000, -1000,
	11, -1000, -1000,
}
var yyPgo = [...]int{

	0, 37, 327, 11, 326, 186, 23, 325, 323, 322,
	321, 187, 144, 10, 4, 319, 7, 299, 298, 0,
	293, 6, 5, 292, 291, 288, 281, 277, 276, 116,
	275, 274, 272, 270, 1, 65, 249, 248, 247, 8,
	3, 219, 2, 215, 202, 126,
}
var yyR1 = [...]int{

	0, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 24, 8, 8, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 35,
	37, 37, 38, 38, 38, 36, 36, 36, 16, 16,
	23, 27, 28, 41, 1, 1, 1, 2, 2, 2,
	3, 3, 3, 3, 4, 4, 4, 4, 12, 12,
	5, 5, 11, 11, 11, 11, 10, 10, 10, 13,
	13, 13, 13, 14, 14, 14, 14, 15, 15, 15,
	6, 6, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 26, 26, 29, 29, 29,
	30, 31, 31, 31, 31, 43, 43, 42, 32, 39,
	39, 33, 33, 33, 33, 9, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 40, 40, 45, 17,
	17, 17, 17, 18, 18, 18, 18, 18, 19, 21,
	21, 20, 20, 20, 22,
}
var yyR2 = [...]int{

	0, 2, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
	0, 1, 1, 3, 3, 1, 3, 3, 0, 1,
	3, 1, 1, 1, 3, 4, 2, 3, 1, 2,
	3, 3, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 1, 3, 4, 2, 0, 3, 1, 2, 3,
	3, 2, 1, 3, 4, 2, 1, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 2, 1, 1,
	4, 6, 5, 4, 3, 0, 1, 1, 4, 3,
	0, 5, 5, 4, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 0,
	3, 2, 1, 1, 3, 1, 3, 4, 1, 2,
	2, 1, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -44, 68, 69, 70, 71, 72, 73, 2, 5,
	-1, 11, -12, -5, -11, 8, 7, 11, -14, 9,
	2, -45, -12, 5, -34, -23, -25, -24, -26, -27,
	-28, -29, -30, -31, -32, -33, 9, -8, -22, -41,
	-5, -1, 7, -9, 27, 26, 20, 19, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, -29,
	-2, 12, -3, 7, 2, -11, -10, 12, -13, 7,
	2, -15, 10, -6, -7, 2, 7, 8, 31, 32,
	33, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 58, 59, 61, 62, 63, 64, 65, -17,
	2, 42, 28, 30, 29, 27, 26, 34, 35, 36,
	37, 38, 39, 31, 33, 32, 58, 13, 13, -34,
	-34, -1, 9, -40, 9, 2, 59, 60, 12, 15,
	2, -4, 2, 34, 35, 40, 41, 12, 15, 2,
	34, 2, 10, 15, 2, 24, -35, -36, -38, -37,
	65, -35, -35, -35, -35, -35, -35, -35, -35, -35,
	-35, -35, -35, -35, -35, 21, 2, -42, 2, 21,
	-42, 10, -39, 9, -39, -14, -14, 12, -3, 19,
	2, 12, -13, 19, 2, 10, -6, -18, 22, -20,
	7, -22, -21, 27, 26, -34, 63, 64, 62, 61,
	-34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
	-34, -34, -34, -34, 17, 2, 14, 10, 15, -39,
	10, 23, 23, -21, -22, -22, -16, -14, -16, -14,
	-14, -43, 2, -42, -34, 10, -40, -19, 20, -19,
	23, 14, -19,
}
var yyDef = [...]int{

	0, -2, 0, 75, 0, 75, 0, 0, 9, 8,
	1, 0, 2, 75, 69, 70, 71, 0, 3, 0,
	86, 4, -2, 5, 6, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 0, 0, 51, 52,
	118, 119, 71, 0, 22, 23, 164, 53, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 7,
	0, 56, 58, 0, 63, 68, 0, 74, 77, 0,
	82, 0, 85, 88, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 148,
	152, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 0, 0, 0, 0,
	21, 117, 130, 0, 130, 134, 0, 0, 54, 0,
	59, 0, 62, 64, 65, 66, 67, 72, 0, 78,
	0, 81, 83, 0, 89, 151, 0, 39, 45, 42,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 115, 116, 0, 124, 127,
	0, 50, 0, 130, 0, 146, 147, 55, 57, 60,
	61, 73, 76, 79, 80, 84, 87, 150, 153, 155,
	161, 162, 163, 0, 0, 24, -2, -2, 0, 0,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, -2, 123, 120, 128, 0, 0,
	133, 0, 0, 0, 159, 160, 46, 49, 47, 43,
	44, 0, 122, 126, 129, 131, 132, 154, 158, 156,
	0, 121, 157,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:157
		{
			yylex.(*parser).generatedParserResult.(*VectorSelector).LabelMatchers = yyDollar[2].matchers
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:159
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:161
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].strings
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:164
		{
			yylex.(*parser).errorf("no expression found in input")
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:166
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:168
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:171
		{
			yylex.(*parser).unexpected("", "")
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:191
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr)}
			}
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:210
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:212
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:214
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:216
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:218
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:220
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:222
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:224
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:226
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:228
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:230
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:232
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:234
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:236
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:238
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:250
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:255
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:265
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:270
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:280
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:286
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:295
		{
			yyVAL.strings = nil
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:300
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr)}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:306
		{
			yyVAL.node = &NumberLiteral{yyDollar[1].float}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:311
		{
			yyVAL.node = &StringLiteral{yyDollar[1].string}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:316
		{
			yyVAL.string = yylex.(*parser).unquoteString(yyDollar[1].item.Val)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:321
		{
			yyVAL.matchers = yyDollar[2].matchers
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:323
		{
			yyVAL.matchers = yyDollar[2].matchers
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:325
		{
			yyVAL.matchers = []*labels.Matcher{}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:331
		{
			yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:333
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:335
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:340
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:342
		{
			yylex.(*parser).unexpected("label matching", "string")
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:344
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:346
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:350
		{
			yyVAL.item = yyDollar[1].item
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:351
		{
			yyVAL.item = yyDollar[1].item
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:352
		{
			yyVAL.item = yyDollar[1].item
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:353
		{
			yyVAL.item = yyDollar[1].item
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:359
		{
			yyVAL.labels = append(yyDollar[2].labels, labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val})
			sort.Sort(yyVAL.labels)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:361
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:369
		{
			yyVAL.item = yyDollar[1].item
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:370
		{
			yyVAL.item = yyDollar[1].item
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:374
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:376
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:378
		{
			yyVAL.labels = labels.New()
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:380
		{
			yyVAL.labels = labels.New()
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:385
		{
			yyVAL.labels = append(yyDollar[1].labels, yyDollar[3].label)
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:387
		{
			yyVAL.labels = []labels.Label{yyDollar[1].label}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:389
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:395
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:397
		{
			yylex.(*parser).unexpected("label set", "string")
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:399
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:401
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:406
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:408
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:410
		{
			yyVAL.strings = []string{}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:412
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:418
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:420
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:422
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \"}\"")
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:427
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:434
		{
			yylex.(*parser).unexpected("grouping opts", "label")
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:467
		{
			offset, err := parseDuration(yyDollar[3].item.Val)
			if err != nil {
				yylex.(*parser).error(err)
			}
			yylex.(*parser).addOffset(yyDollar[1].node, offset)
			yyVAL.node = yyDollar[1].node
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:476
		{
			yylex.(*parser).unexpected("offset", "duration")
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:481
		{
			yyVAL.node = yylex.(*parser).newVectorSelector(yyDollar[1].item.Val, yyDollar[2].matchers)
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:483
		{
			yyVAL.node = yylex.(*parser).newVectorSelector(yyDollar[1].item.Val, nil)
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:485
		{
			yyVAL.node = yylex.(*parser).newVectorSelector("", yyDollar[1].matchers)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:490
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yyVAL.node = &MatrixSelector{
				Name:          vs.Name,
				Offset:        vs.Offset,
				LabelMatchers: vs.LabelMatchers,
				Range:         yyDollar[3].duration,
			}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/generated_parser.y:503
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,
			}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/generated_parser.y:511
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:513
		{
			yylex.(*parser).unexpected("subquery selector", "\":\"")
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:515
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:521
		{
			yyVAL.duration = 0
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:527
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).error(err)
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:538
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).errorf("unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[3].node.(Expressions),
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:552
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:554
		{
			yyVAL.node = Expressions{}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/generated_parser.y:561
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[4].node)
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/generated_parser.y:563
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[5].node, yyDollar[3].node)
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:565
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[3].node)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:567
		{
			yylex.(*parser).unexpected("aggregation", "")
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:586
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:592
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:602
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/generated_parser.y:612
		{
			yyVAL.series = []sequenceValue{}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:614
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:616
		{
			yyVAL.series = yyDollar[1].series
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:618
		{
			yylex.(*parser).unexpected("series values", "")
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:623
		{
			yyVAL.series = []sequenceValue{{omitted: true}}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:625
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{omitted: true})
			}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:632
		{
			yyVAL.series = []sequenceValue{{value: yyDollar[1].float}}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/generated_parser.y:634
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{value: yyDollar[1].float})
			}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/generated_parser.y:641
		{
			yyVAL.series = []sequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, sequenceValue{value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:650
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).errorf("invalid repitition in series values: %s", err)
			}
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:661
		{
			yyVAL.float = yyDollar[2].float
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/generated_parser.y:663
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:668
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:675
		{
			yyVAL.float = yyDollar[1].float
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:677
		{
			yyVAL.float = yyDollar[1].float
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/generated_parser.y:684
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	}
	goto yystack /* stack new state and value */
}
