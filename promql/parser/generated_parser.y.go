// Code generated by goyacc -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.

//line promql/parser/generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line promql/parser/generated_parser.y:15

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
)

//line promql/parser/generated_parser.y:28
type yySymType struct {
	yys      int
	node     Node
	item     Item
	matchers []*labels.Matcher
	matcher  *labels.Matcher
	label    labels.Label
	labels   labels.Labels
	lblList  []labels.Label
	strings  []string
	series   []SequenceValue
	uint     uint64
	float    float64
	duration time.Duration
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const OPEN_HIST = 57358
const CLOSE_HIST = 57359
const METRIC_IDENTIFIER = 57360
const NUMBER = 57361
const RIGHT_BRACE = 57362
const RIGHT_BRACKET = 57363
const RIGHT_PAREN = 57364
const SEMICOLON = 57365
const SPACE = 57366
const STRING = 57367
const TIMES = 57368
const histogramDescStart = 57369
const SUM_DESC = 57370
const COUNT_DESC = 57371
const SCHEMA_DESC = 57372
const OFFSET_DESC = 57373
const BUCKETS_DESC = 57374
const histogramDescEnd = 57375
const operatorsStart = 57376
const ADD = 57377
const DIV = 57378
const EQLC = 57379
const EQL_REGEX = 57380
const GTE = 57381
const GTR = 57382
const LAND = 57383
const LOR = 57384
const LSS = 57385
const LTE = 57386
const LUNLESS = 57387
const MOD = 57388
const MUL = 57389
const NEQ = 57390
const NEQ_REGEX = 57391
const POW = 57392
const SUB = 57393
const AT = 57394
const ATAN2 = 57395
const operatorsEnd = 57396
const aggregatorsStart = 57397
const AVG = 57398
const BOTTOMK = 57399
const COUNT = 57400
const COUNT_VALUES = 57401
const GROUP = 57402
const MAX = 57403
const MIN = 57404
const QUANTILE = 57405
const STDDEV = 57406
const STDVAR = 57407
const SUM = 57408
const TOPK = 57409
const aggregatorsEnd = 57410
const keywordsStart = 57411
const BOOL = 57412
const BY = 57413
const GROUP_LEFT = 57414
const GROUP_RIGHT = 57415
const IGNORING = 57416
const OFFSET = 57417
const ON = 57418
const WITHOUT = 57419
const keywordsEnd = 57420
const preprocessorStart = 57421
const START = 57422
const END = 57423
const preprocessorEnd = 57424
const startSymbolsStart = 57425
const START_METRIC = 57426
const START_SERIES_DESCRIPTION = 57427
const START_EXPRESSION = 57428
const START_METRIC_SELECTOR = 57429
const startSymbolsEnd = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"OPEN_HIST",
	"CLOSE_HIST",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"histogramDescStart",
	"SUM_DESC",
	"COUNT_DESC",
	"SCHEMA_DESC",
	"OFFSET_DESC",
	"BUCKETS_DESC",
	"histogramDescEnd",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/parser/generated_parser.y:784

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 58,
	2, 154,
	15, 154,
	71, 154,
	77, 154,
	-2, 97,
	-1, 59,
	2, 155,
	15, 155,
	71, 155,
	77, 155,
	-2, 98,
	-1, 60,
	2, 156,
	15, 156,
	71, 156,
	77, 156,
	-2, 100,
	-1, 61,
	2, 157,
	15, 157,
	71, 157,
	77, 157,
	-2, 101,
	-1, 62,
	2, 158,
	15, 158,
	71, 158,
	77, 158,
	-2, 102,
	-1, 63,
	2, 159,
	15, 159,
	71, 159,
	77, 159,
	-2, 107,
	-1, 64,
	2, 160,
	15, 160,
	71, 160,
	77, 160,
	-2, 109,
	-1, 65,
	2, 161,
	15, 161,
	71, 161,
	77, 161,
	-2, 111,
	-1, 66,
	2, 162,
	15, 162,
	71, 162,
	77, 162,
	-2, 112,
	-1, 67,
	2, 163,
	15, 163,
	71, 163,
	77, 163,
	-2, 113,
	-1, 68,
	2, 164,
	15, 164,
	71, 164,
	77, 164,
	-2, 114,
	-1, 69,
	2, 165,
	15, 165,
	71, 165,
	77, 165,
	-2, 115,
	-1, 191,
	12, 210,
	13, 210,
	18, 210,
	19, 210,
	25, 210,
	35, 210,
	41, 210,
	42, 210,
	45, 210,
	51, 210,
	56, 210,
	57, 210,
	58, 210,
	59, 210,
	60, 210,
	61, 210,
	62, 210,
	63, 210,
	64, 210,
	65, 210,
	66, 210,
	67, 210,
	71, 210,
	75, 210,
	77, 210,
	80, 210,
	81, 210,
	-2, 0,
	-1, 192,
	12, 210,
	13, 210,
	18, 210,
	19, 210,
	25, 210,
	35, 210,
	41, 210,
	42, 210,
	45, 210,
	51, 210,
	56, 210,
	57, 210,
	58, 210,
	59, 210,
	60, 210,
	61, 210,
	62, 210,
	63, 210,
	64, 210,
	65, 210,
	66, 210,
	67, 210,
	71, 210,
	75, 210,
	77, 210,
	80, 210,
	81, 210,
	-2, 0,
	-1, 213,
	21, 208,
	-2, 0,
	-1, 272,
	21, 209,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 679

var yyAct = [...]int16{
	291, 253, 217, 37, 185, 258, 143, 268, 267, 112,
	99, 257, 77, 101, 100, 189, 103, 190, 127, 149,
	280, 219, 104, 191, 192, 300, 294, 102, 279, 155,
	57, 229, 83, 252, 262, 6, 154, 235, 183, 181,
	105, 288, 92, 93, 298, 156, 95, 299, 98, 82,
	276, 187, 155, 186, 182, 275, 251, 107, 80, 108,
	231, 232, 180, 270, 233, 106, 286, 99, 156, 123,
	274, 97, 246, 248, 292, 220, 222, 224, 225, 226,
	234, 236, 239, 240, 241, 242, 243, 109, 247, 221,
	223, 227, 228, 230, 237, 238, 103, 152, 153, 244,
	245, 254, 104, 95, 151, 98, 157, 296, 256, 167,
	150, 161, 164, 285, 159, 154, 160, 2, 3, 4,
	5, 154, 302, 145, 301, 209, 105, 188, 97, 179,
	146, 155, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 156, 173, 284,
	174, 208, 128, 129, 130, 131, 132, 133, 134, 135,
	136, 137, 138, 139, 140, 141, 142, 210, 211, 214,
	261, 219, 144, 213, 72, 11, 121, 264, 263, 146,
	250, 229, 9, 7, 176, 259, 114, 235, 212, 79,
	122, 216, 260, 74, 175, 177, 113, 265, 266, 78,
	171, 269, 163, 117, 249, 170, 114, 178, 116, 118,
	231, 232, 273, 287, 233, 162, 113, 48, 169, 146,
	272, 115, 246, 73, 111, 220, 222, 224, 225, 226,
	234, 236, 239, 240, 241, 242, 243, 79, 295, 221,
	223, 227, 228, 230, 237, 238, 283, 78, 184, 244,
	245, 158, 277, 51, 72, 75, 53, 278, 146, 23,
	52, 281, 120, 166, 56, 282, 54, 10, 10, 8,
	34, 1, 271, 35, 47, 46, 70, 45, 289, 44,
	290, 293, 19, 20, 126, 43, 21, 42, 41, 124,
	165, 40, 71, 125, 39, 297, 38, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 49,
	147, 255, 14, 119, 215, 76, 25, 148, 31, 55,
	218, 32, 33, 36, 99, 51, 72, 172, 53, 50,
	110, 23, 52, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 81, 83, 0, 70, 0,
	0, 0, 0, 0, 19, 20, 92, 93, 21, 0,
	95, 96, 98, 82, 71, 0, 0, 0, 0, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 0, 0, 0, 14, 97, 0, 0, 25, 0,
	31, 0, 0, 32, 33, 51, 72, 0, 53, 0,
	0, 23, 52, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 19, 20, 18, 72, 21, 0,
	0, 0, 23, 0, 71, 0, 0, 0, 0, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 0, 0, 0, 14, 19, 20, 0, 25, 21,
	31, 0, 0, 32, 33, 0, 0, 0, 0, 0,
	12, 13, 15, 16, 17, 22, 24, 26, 27, 28,
	29, 30, 18, 11, 0, 14, 0, 0, 23, 25,
	0, 31, 0, 0, 32, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 19, 20, 0, 0, 21, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 12, 13, 15, 16,
	17, 22, 24, 26, 27, 28, 29, 30, 99, 0,
	0, 14, 0, 0, 0, 25, 168, 31, 0, 0,
	32, 33, 0, 0, 0, 0, 0, 99, 0, 81,
	83, 84, 0, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 0, 95, 96, 98, 82, 81, 83,
	84, 0, 85, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 0, 95, 96, 98, 82, 0, 99, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 97, 81,
	83, 84, 0, 85, 86, 87, 0, 89, 90, 91,
	92, 93, 94, 0, 95, 96, 98, 82, 81, 83,
	84, 0, 85, 86, 0, 0, 89, 90, 0, 92,
	93, 94, 0, 95, 96, 98, 82, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97,
}

var yyPact = [...]int16{
	33, 173, 470, 470, 313, 414, -1000, -1000, -1000, -1000,
	162, 235, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 34, -1000, 543, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	25, 111, -1000, 383, -1000, 383, 161, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 204, -1000, -1000, -1000, 201, -1000, 205, -1000,
	174, -52, -52, -52, -52, -52, -52, -52, -52, -52,
	-52, -52, -52, -52, -52, -52, -52, 121, 17, 249,
	111, -55, -1000, 200, 200, 241, -1000, 524, 53, -1000,
	198, -1000, -1000, 146, -1000, -1000, 187, -1000, 37, 30,
	-1000, 14, 21, 383, -1000, -59, -49, -1000, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, -1000, 170, -1000, -1000, -1000, 110, -1000,
	-1000, -1000, -1000, -1000, -1000, 102, 102, 167, -1000, -1000,
	-1000, -1000, 169, -1000, -1000, 66, -1000, 543, -1000, -1000,
	184, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 96, -1000, 168, 10, 172, 171, -4, 200,
	200, 200, 200, 53, 53, 310, 310, 310, 603, 584,
	310, 310, 603, 53, 53, 310, 53, -4, -1000, 41,
	-1000, -1000, -1000, 210, -1000, 48, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 383, -1000,
	-1000, -1000, -1000, -1000, 2, -6, -1000, -1000, -1000, -1000,
	21, -1000, -1000, 135, 94, -1000, -1000, -1000, -1000, -1000,
	-1000, 45, 211, -1000, -1000, 19, -1000, 543, 96, 55,
	55, 0, -1000, -1000, 88, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 55, 23, -1000, -1000, -1000, 103,
	-1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 330, 9, 329, 2, 327, 320, 264, 319, 317,
	182, 269, 315, 12, 314, 7, 8, 1, 313, 0,
	11, 311, 5, 310, 309, 296, 14, 69, 294, 293,
	3, 291, 290, 13, 289, 30, 288, 287, 285, 284,
	279, 277, 275, 274, 217, 6, 272, 271, 270, 262,
	257, 248, 4, 246, 238,
}

var yyR1 = [...]int8{
	0, 47, 47, 47, 47, 47, 47, 47, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	25, 25, 25, 25, 26, 26, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 27, 29, 29, 39, 39, 34, 34, 34,
	34, 15, 15, 15, 15, 14, 14, 14, 4, 4,
	31, 33, 33, 32, 32, 32, 40, 38, 38, 38,
	24, 24, 24, 9, 9, 36, 42, 42, 42, 42,
	42, 43, 44, 44, 44, 35, 35, 35, 1, 1,
	1, 2, 2, 2, 2, 11, 11, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 10,
	10, 10, 10, 12, 12, 12, 13, 13, 13, 48,
	48, 50, 18, 18, 17, 17, 17, 17, 17, 21,
	21, 21, 49, 51, 51, 51, 51, 52, 52, 53,
	53, 54, 54, 54, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 8, 8, 5, 5, 5, 5, 37,
	20, 22, 22, 23, 23, 19, 45, 41, 46, 46,
	16, 16,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 1, 0, 1, 3, 3, 1, 1, 3,
	3, 3, 4, 2, 1, 3, 1, 2, 1, 1,
	2, 3, 2, 3, 1, 2, 3, 3, 4, 3,
	3, 5, 3, 1, 1, 4, 6, 6, 5, 4,
	3, 2, 2, 1, 1, 3, 4, 2, 3, 1,
	2, 3, 3, 2, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 0, 3, 1, 2, 3, 3, 1, 3,
	3, 0, 5, 2, 1, 3, 1, 3, 4, 1,
	1, 1, 3, 0, 3, 2, 2, 3, 3, 3,
	4, 3, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 1, 0, 1,
	0, 1,
}

var yyChk = [...]int16{
	-1000, -47, 84, 85, 86, 87, 2, 10, -11, -10,
	-7, 13, 56, 57, 71, 58, 59, 60, 12, 41,
	42, 45, 61, 18, 62, 75, 63, 64, 65, 66,
	67, 77, 80, 81, -48, -11, 10, -30, -25, -28,
	-31, -36, -37, -38, -40, -41, -42, -43, -44, -24,
	-3, 12, 19, 15, 25, -8, -7, -35, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	35, 51, 13, -44, -10, 20, -12, -13, 12, 2,
	24, 35, 53, 36, 37, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 50, 51, 75, 52, 14,
	-26, -33, 2, 71, 77, 15, -33, -30, -30, -35,
	-1, 20, -2, 12, 2, 20, 7, 2, 4, -18,
	-49, 2, 16, -27, -34, -29, -39, 70, -27, -27,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -45, 51, 2, 9, -23, -9, 2,
	-20, -22, 80, 81, 19, 35, 51, -45, 2, -33,
	-26, -15, 15, 2, -15, -32, 22, -30, 22, 20,
	7, 2, -5, 2, 4, 48, 38, 49, 20, -13,
	25, 2, 24, 24, -51, -52, 32, 30, -30, 74,
	76, 72, 73, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -30, -30, -45, 15,
	-20, -20, 21, 6, 2, -14, 22, -4, -6, 2,
	56, 70, 57, 71, 58, 59, 60, 72, 73, 12,
	74, 41, 42, 45, 61, 18, 62, 75, 76, 63,
	64, 65, 66, 67, 80, 81, 53, 22, 7, 20,
	-2, 25, 2, -17, 5, -21, 12, -20, -22, 17,
	24, 2, 24, 6, 6, -15, -15, -16, -15, -16,
	22, -46, -45, 2, 22, 7, 2, -30, -50, 26,
	26, -22, -52, -53, 14, 19, 21, 2, 22, -4,
	-17, -19, 19, -19, 26, -54, 19, -19, 21, 24,
	2, 21, 19,
}

var yyDef = [...]int16{
	0, -2, 122, 122, 0, 0, 7, 6, 1, 95,
	122, 0, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 2, 0, 3, 4, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	0, 103, 199, 0, 207, 0, 83, 84, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	193, 194, 0, 5, 96, 119, 0, 124, 0, 128,
	0, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 0, 0, 0,
	0, 22, 23, 0, 0, 0, 60, 0, 81, 82,
	0, 87, 89, 0, 94, 120, 0, 125, 0, 129,
	130, 0, 143, 0, 42, 47, 48, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 69, 206, 70, 0, 72,
	203, 204, 73, 74, 200, 0, 0, 0, 80, 20,
	21, 24, 0, 54, 25, 0, 62, 64, 66, 85,
	0, 90, 0, 93, 195, 196, 197, 198, 121, 123,
	126, 127, 0, 133, 0, 0, 0, 0, 26, 0,
	0, -2, -2, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 68, 0,
	201, 202, 75, -2, 79, 0, 53, 56, 58, 59,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 61, 65, 86,
	88, 91, 92, 131, 134, 136, 139, 140, 141, 142,
	0, 146, 145, 0, 0, 45, 46, 49, 211, 50,
	71, 0, -2, 78, 51, 0, 57, 63, 0, 0,
	0, 0, 144, 147, 0, 148, 76, 77, 52, 55,
	132, 135, 205, 137, 0, 0, 152, 138, 149, 0,
	153, 150, 151,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:186
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:189
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:191
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:193
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:196
		{
			yylex.(*parser).unexpected("", "")
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:219
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:221
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:223
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:225
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:233
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:239
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:252
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:253
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:254
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:255
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:256
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:257
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:258
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:259
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:260
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:261
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:262
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:263
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:264
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:265
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:266
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:267
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:275
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:280
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:288
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:293
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:303
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:309
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:318
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:320
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:322
		{
			yyVAL.strings = []string{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:324
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:330
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:332
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:334
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:338
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:345
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:353
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:370
		{
			yyVAL.node = yyDollar[2].node
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:372
		{
			yyVAL.node = Expressions{}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:376
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:378
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:380
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:391
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:399
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:404
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:409
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:416
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:421
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:426
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:436
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:461
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:471
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:473
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:475
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:477
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:487
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:505
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:513
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:523
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:531
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:538
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:545
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:554
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:562
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:564
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:568
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:570
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:572
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:574
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:582
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:584
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:591
		{
			yyVAL.labels = labels.New()
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:593
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:595
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:597
		{
			yyVAL.labels = labels.New()
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:601
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:603
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:605
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:610
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:612
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:616
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:625
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{labels: yyDollar[1].labels} // TODO
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:629
		{
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:634
		{ /*$$ = append($1, $3...)*/
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:638
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:642
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:644
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:651
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:653
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:660
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:670
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:725
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:733
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:735
		{
			yyVAL.float = yyDollar[2].float
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:736
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:742
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:752
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:763
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:776
		{
			yyVAL.duration = 0
		}
	case 210:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:780
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
