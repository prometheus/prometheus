// Code generated by goyacc -l -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/histogram"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
	"github.com/prometheus/prometheus/promql/parser/posrange"

	"github.com/prometheus/common/model"
)

type yySymType struct {
	yys         int
	node        Node
	item        Item
	matchers    []*labels.Matcher
	matcher     *labels.Matcher
	label       labels.Label
	labels      labels.Labels
	lblList     []labels.Label
	strings     []string
	series      []SequenceValue
	histogram   *histogram.FloatHistogram
	descriptors map[string]interface{}
	bucket_set  []float64
	int         int64
	uint        uint64
	float       float64
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const OPEN_HIST = 57358
const CLOSE_HIST = 57359
const METRIC_IDENTIFIER = 57360
const NUMBER = 57361
const RIGHT_BRACE = 57362
const RIGHT_BRACKET = 57363
const RIGHT_PAREN = 57364
const SEMICOLON = 57365
const SPACE = 57366
const STRING = 57367
const TIMES = 57368
const histogramDescStart = 57369
const SUM_DESC = 57370
const COUNT_DESC = 57371
const SCHEMA_DESC = 57372
const OFFSET_DESC = 57373
const NEGATIVE_OFFSET_DESC = 57374
const BUCKETS_DESC = 57375
const NEGATIVE_BUCKETS_DESC = 57376
const ZERO_BUCKET_DESC = 57377
const ZERO_BUCKET_WIDTH_DESC = 57378
const CUSTOM_VALUES_DESC = 57379
const COUNTER_RESET_HINT_DESC = 57380
const histogramDescEnd = 57381
const operatorsStart = 57382
const ADD = 57383
const DIV = 57384
const EQLC = 57385
const EQL_REGEX = 57386
const GTE = 57387
const GTR = 57388
const LAND = 57389
const LOR = 57390
const LSS = 57391
const LTE = 57392
const LUNLESS = 57393
const MOD = 57394
const MUL = 57395
const NEQ = 57396
const NEQ_REGEX = 57397
const POW = 57398
const SUB = 57399
const AT = 57400
const ATAN2 = 57401
const operatorsEnd = 57402
const aggregatorsStart = 57403
const AVG = 57404
const BOTTOMK = 57405
const COUNT = 57406
const COUNT_VALUES = 57407
const GROUP = 57408
const MAX = 57409
const MIN = 57410
const QUANTILE = 57411
const STDDEV = 57412
const STDVAR = 57413
const SUM = 57414
const TOPK = 57415
const LIMITK = 57416
const LIMIT_RATIO = 57417
const aggregatorsEnd = 57418
const keywordsStart = 57419
const BOOL = 57420
const BY = 57421
const GROUP_LEFT = 57422
const GROUP_RIGHT = 57423
const IGNORING = 57424
const OFFSET = 57425
const ON = 57426
const WITHOUT = 57427
const keywordsEnd = 57428
const preprocessorStart = 57429
const START = 57430
const END = 57431
const preprocessorEnd = 57432
const counterResetHintsStart = 57433
const UNKNOWN_COUNTER_RESET = 57434
const COUNTER_RESET = 57435
const NOT_COUNTER_RESET = 57436
const GAUGE_TYPE = 57437
const counterResetHintsEnd = 57438
const startSymbolsStart = 57439
const START_METRIC = 57440
const START_SERIES_DESCRIPTION = 57441
const START_EXPRESSION = 57442
const START_METRIC_SELECTOR = 57443
const startSymbolsEnd = 57444

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"OPEN_HIST",
	"CLOSE_HIST",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"histogramDescStart",
	"SUM_DESC",
	"COUNT_DESC",
	"SCHEMA_DESC",
	"OFFSET_DESC",
	"NEGATIVE_OFFSET_DESC",
	"BUCKETS_DESC",
	"NEGATIVE_BUCKETS_DESC",
	"ZERO_BUCKET_DESC",
	"ZERO_BUCKET_WIDTH_DESC",
	"CUSTOM_VALUES_DESC",
	"COUNTER_RESET_HINT_DESC",
	"histogramDescEnd",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"LIMITK",
	"LIMIT_RATIO",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"counterResetHintsStart",
	"UNKNOWN_COUNTER_RESET",
	"COUNTER_RESET",
	"NOT_COUNTER_RESET",
	"GAUGE_TYPE",
	"counterResetHintsEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 37,
	1, 142,
	10, 142,
	24, 142,
	-2, 0,
	-1, 63,
	2, 185,
	15, 185,
	79, 185,
	85, 185,
	-2, 103,
	-1, 64,
	2, 186,
	15, 186,
	79, 186,
	85, 186,
	-2, 104,
	-1, 65,
	2, 187,
	15, 187,
	79, 187,
	85, 187,
	-2, 106,
	-1, 66,
	2, 188,
	15, 188,
	79, 188,
	85, 188,
	-2, 107,
	-1, 67,
	2, 189,
	15, 189,
	79, 189,
	85, 189,
	-2, 108,
	-1, 68,
	2, 190,
	15, 190,
	79, 190,
	85, 190,
	-2, 113,
	-1, 69,
	2, 191,
	15, 191,
	79, 191,
	85, 191,
	-2, 115,
	-1, 70,
	2, 192,
	15, 192,
	79, 192,
	85, 192,
	-2, 117,
	-1, 71,
	2, 193,
	15, 193,
	79, 193,
	85, 193,
	-2, 118,
	-1, 72,
	2, 194,
	15, 194,
	79, 194,
	85, 194,
	-2, 119,
	-1, 73,
	2, 195,
	15, 195,
	79, 195,
	85, 195,
	-2, 120,
	-1, 74,
	2, 196,
	15, 196,
	79, 196,
	85, 196,
	-2, 121,
	-1, 75,
	2, 197,
	15, 197,
	79, 197,
	85, 197,
	-2, 125,
	-1, 76,
	2, 198,
	15, 198,
	79, 198,
	85, 198,
	-2, 126,
	-1, 126,
	41, 253,
	42, 253,
	52, 253,
	53, 253,
	57, 253,
	-2, 20,
	-1, 227,
	9, 247,
	12, 247,
	13, 247,
	18, 247,
	19, 247,
	25, 247,
	41, 247,
	47, 247,
	48, 247,
	51, 247,
	57, 247,
	62, 247,
	63, 247,
	64, 247,
	65, 247,
	66, 247,
	67, 247,
	68, 247,
	69, 247,
	70, 247,
	71, 247,
	72, 247,
	73, 247,
	74, 247,
	75, 247,
	79, 247,
	83, 247,
	85, 247,
	88, 247,
	89, 247,
	-2, 0,
	-1, 228,
	9, 247,
	12, 247,
	13, 247,
	18, 247,
	19, 247,
	25, 247,
	41, 247,
	47, 247,
	48, 247,
	51, 247,
	57, 247,
	62, 247,
	63, 247,
	64, 247,
	65, 247,
	66, 247,
	67, 247,
	68, 247,
	69, 247,
	70, 247,
	71, 247,
	72, 247,
	73, 247,
	74, 247,
	75, 247,
	79, 247,
	83, 247,
	85, 247,
	88, 247,
	89, 247,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 915

var yyAct = [...]int16{
	167, 363, 361, 170, 368, 255, 39, 219, 305, 52,
	178, 319, 86, 130, 84, 6, 320, 109, 203, 44,
	118, 117, 116, 227, 228, 198, 109, 171, 375, 376,
	377, 378, 119, 121, 225, 109, 226, 145, 120, 61,
	115, 358, 357, 331, 91, 93, 94, 140, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 333, 105,
	106, 108, 92, 93, 123, 133, 125, 124, 105, 126,
	108, 199, 339, 102, 103, 131, 122, 105, 299, 108,
	92, 362, 296, 290, 297, 59, 107, 338, 88, 353,
	110, 113, 132, 300, 337, 107, 322, 119, 331, 176,
	127, 114, 112, 120, 107, 115, 111, 340, 352, 301,
	223, 2, 3, 4, 5, 177, 247, 165, 295, 180,
	183, 184, 185, 186, 187, 188, 141, 163, 197, 181,
	181, 181, 181, 181, 181, 181, 191, 194, 189, 56,
	190, 294, 121, 369, 221, 166, 79, 293, 224, 55,
	211, 209, 215, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 222, 386,
	292, 77, 202, 175, 245, 214, 246, 201, 35, 7,
	248, 249, 351, 174, 244, 350, 181, 78, 385, 213,
	200, 384, 245, 164, 113, 182, 182, 182, 182, 182,
	182, 182, 181, 175, 114, 112, 175, 205, 115, 36,
	349, 348, 212, 174, 132, 291, 174, 347, 387, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 10, 176, 328, 90, 176, 346,
	321, 327, 317, 318, 81, 109, 298, 207, 110, 113,
	182, 177, 182, 193, 177, 289, 326, 206, 208, 114,
	112, 180, 323, 115, 111, 345, 192, 344, 182, 343,
	288, 181, 91, 93, 94, 342, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 169, 105, 106, 108,
	92, 341, 138, 175, 137, 139, 329, 136, 330, 332,
	252, 334, 135, 174, 251, 1, 217, 161, 335, 336,
	175, 325, 62, 220, 107, 134, 87, 223, 56, 250,
	174, 49, 48, 47, 166, 176, 85, 204, 55, 205,
	324, 46, 8, 355, 210, 356, 37, 182, 133, 88,
	144, 177, 176, 364, 365, 366, 360, 45, 131, 367,
	77, 371, 370, 373, 372, 258, 129, 50, 177, 379,
	380, 88, 43, 80, 381, 268, 78, 142, 195, 207,
	383, 274, 172, 173, 42, 354, 304, 143, 257, 206,
	208, 41, 40, 303, 51, 388, 218, 307, 308, 306,
	313, 315, 312, 314, 309, 310, 311, 316, 382, 60,
	270, 271, 9, 9, 272, 302, 89, 216, 253, 82,
	374, 168, 285, 256, 53, 259, 261, 263, 264, 265,
	273, 275, 278, 279, 280, 281, 282, 286, 287, 258,
	128, 260, 262, 266, 267, 269, 276, 277, 0, 268,
	87, 283, 284, 0, 0, 274, 0, 0, 179, 254,
	85, 0, 257, 0, 0, 56, 0, 0, 83, 0,
	0, 166, 0, 88, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 271, 0, 0, 272, 0,
	0, 0, 0, 0, 0, 0, 285, 77, 0, 259,
	261, 263, 264, 265, 273, 275, 278, 279, 280, 281,
	282, 286, 287, 78, 0, 260, 262, 266, 267, 269,
	276, 277, 0, 0, 56, 283, 284, 54, 79, 0,
	57, 0, 0, 22, 55, 0, 162, 196, 0, 0,
	58, 0, 0, 56, 0, 0, 0, 0, 0, 166,
	0, 0, 0, 55, 0, 0, 77, 0, 0, 0,
	0, 0, 18, 19, 0, 0, 20, 0, 0, 0,
	0, 0, 78, 0, 0, 77, 0, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 78, 0, 0, 13, 0, 0, 0, 24, 0,
	30, 0, 0, 31, 32, 56, 38, 109, 54, 79,
	0, 57, 359, 0, 22, 55, 0, 0, 0, 0,
	0, 58, 0, 307, 308, 306, 313, 315, 312, 314,
	309, 310, 311, 316, 91, 93, 0, 77, 0, 0,
	0, 0, 0, 18, 19, 102, 103, 20, 0, 105,
	106, 108, 92, 78, 0, 0, 0, 0, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 13, 107, 0, 0, 24,
	0, 30, 0, 56, 31, 32, 54, 79, 0, 57,
	0, 0, 22, 55, 0, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	0, 18, 19, 0, 0, 20, 0, 0, 0, 17,
	79, 78, 0, 0, 0, 22, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	0, 0, 0, 13, 0, 0, 0, 24, 0, 30,
	0, 0, 31, 32, 18, 19, 0, 0, 20, 0,
	0, 0, 17, 35, 0, 0, 0, 0, 22, 11,
	12, 14, 15, 16, 21, 23, 25, 26, 27, 28,
	29, 33, 34, 0, 0, 0, 13, 0, 0, 0,
	24, 0, 30, 0, 0, 31, 32, 18, 19, 0,
	0, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 11, 12, 14, 15, 16, 21, 23, 25,
	26, 27, 28, 29, 33, 34, 109, 0, 0, 13,
	0, 0, 0, 24, 0, 30, 0, 0, 31, 32,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 91, 93, 94, 0, 95, 96, 97,
	0, 99, 100, 101, 102, 103, 104, 0, 105, 106,
	108, 92, 91, 93, 94, 0, 95, 96, 0, 0,
	99, 100, 0, 102, 103, 104, 0, 105, 106, 108,
	92, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 107,
}

var yyPact = [...]int16{
	13, 169, 750, 750, 586, 707, -1000, -1000, -1000, 165,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 438, -1000, 235, -1000, 231,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 207, 18, 127, -1000, -1000, 664, -1000, 664,
	133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 336,
	-1000, -1000, 295, -1000, -1000, 290, 291, -1000, -1000, 23,
	-1000, -41, -41, -41, -41, -41, -41, -41, -41, -41,
	-41, -41, -41, -41, -41, -41, -41, 524, 284, 446,
	130, 130, 130, 130, 130, 130, 127, -47, -1000, 251,
	251, 505, -1000, 3, 49, 12, -16, -1000, 170, -1000,
	-1000, 325, 203, -1000, -1000, 314, -1000, 187, -1000, 150,
	301, 664, -1000, -48, -57, -1000, 664, 664, 664, 664,
	664, 664, 664, 664, 664, 664, 664, 664, 664, 664,
	664, -1000, -1000, -1000, 130, 207, 130, -1000, 101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 164, 164, 298, -1000,
	207, -1000, 130, 152, 152, -16, -16, -16, -16, -1000,
	-1000, -1000, 427, -1000, -1000, 248, -1000, 231, -1000, -1000,
	-1000, 63, -1000, 145, -1000, -1000, -1000, -1000, -1000, 116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 56, 58, 52,
	-1000, -1000, -1000, 359, 21, 251, 251, 251, 251, 12,
	12, 583, 583, 583, 831, 812, 583, 583, 831, 12,
	12, 583, 12, 21, -1000, -16, 49, 74, -1000, -1000,
	-1000, 309, -1000, 234, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 664,
	-1000, -1000, -1000, -1000, -1000, -1000, 79, 79, 32, 79,
	94, 94, 70, 90, -1000, -1000, 285, 269, 263, 261,
	259, 233, 211, 205, 204, 179, 176, -1000, -1000, -1000,
	-1000, -1000, -1000, 87, -1000, -1000, -1000, 353, -1000, 231,
	-1000, -1000, -1000, 79, -1000, 16, 15, 585, -1000, -1000,
	-1000, 24, 194, 194, 194, 164, 129, 129, 24, 129,
	24, -64, -1000, -1000, -1000, -1000, -1000, 79, 79, -1000,
	-1000, -1000, 79, -1000, -1000, -1000, -1000, -1000, -1000, 194,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 167, -1000, 197, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 430, 13, 414, 5, 18, 413, 399, 85, 411,
	12, 410, 234, 332, 409, 14, 408, 16, 11, 407,
	406, 7, 405, 8, 4, 398, 2, 1, 3, 386,
	27, 0, 384, 382, 22, 126, 381, 377, 6, 374,
	368, 21, 367, 39, 362, 19, 347, 340, 331, 323,
	322, 321, 357, 9, 312, 10, 307, 305, 209,
}

var yyR1 = [...]int8{
	0, 57, 57, 57, 57, 57, 57, 57, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
	38, 33, 33, 33, 33, 34, 34, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 35, 37, 37, 47, 47, 42, 42,
	42, 42, 17, 17, 17, 17, 16, 16, 16, 4,
	4, 4, 39, 41, 41, 40, 40, 40, 48, 55,
	46, 46, 32, 32, 32, 9, 9, 44, 50, 50,
	50, 50, 50, 50, 51, 52, 52, 52, 43, 43,
	43, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 13, 13, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 12, 12, 12,
	12, 14, 14, 14, 15, 15, 15, 15, 15, 15,
	15, 58, 20, 20, 20, 20, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 29, 29, 29, 21, 21,
	21, 21, 22, 22, 22, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 24, 24, 25, 25,
	25, 11, 11, 11, 11, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 8, 8,
	5, 5, 5, 5, 45, 45, 28, 28, 30, 30,
	31, 31, 27, 26, 26, 49, 10, 18, 18, 56,
	56, 56, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 54,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 2, 2, 2, 2, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 1, 0, 1, 3, 3, 1, 1,
	3, 3, 3, 4, 2, 1, 3, 1, 2, 1,
	1, 1, 2, 3, 2, 3, 1, 2, 3, 1,
	3, 3, 3, 5, 3, 1, 1, 4, 6, 5,
	6, 5, 4, 3, 2, 2, 1, 1, 3, 4,
	2, 3, 1, 2, 3, 3, 1, 3, 3, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 2,
	0, 3, 1, 2, 3, 3, 1, 3, 3, 2,
	1, 2, 0, 3, 2, 1, 1, 3, 1, 3,
	4, 1, 3, 5, 5, 1, 1, 1, 4, 3,
	3, 2, 3, 1, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 2, 1, 1, 1, 0, 1, 1,
	2, 1, 1, 2, 3, 3, 3, 3, 3, 3,
	1, 3,
}

var yyChk = [...]int16{
	-1000, -57, 98, 99, 100, 101, 2, 10, -13, -7,
	-12, 62, 63, 79, 64, 65, 66, 12, 47, 48,
	51, 67, 18, 68, 83, 69, 70, 71, 72, 73,
	85, 88, 89, 74, 75, 13, -58, -13, 10, -38,
	-33, -36, -39, -44, -45, -46, -48, -49, -50, -51,
	-52, -32, -53, -3, 12, 19, 9, 15, 25, -8,
	-7, -43, -54, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 41, 57, 13,
	-52, -12, -14, 20, -15, 12, -10, 2, 25, -20,
	2, 41, 59, 42, 43, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 56, 57, 83, 58, 14,
	41, 57, 53, 42, 52, 56, -34, -41, 2, 79,
	85, 15, -41, -38, -53, -38, -53, -43, -1, 20,
	-2, 12, -10, 2, 20, 7, 2, 4, 2, 4,
	24, -35, -42, -37, -47, 78, -35, -35, -35, -35,
	-35, -35, -35, -35, -35, -35, -35, -35, -35, -35,
	-35, -56, 2, -45, -8, -53, 15, -31, -9, 2,
	-28, -30, 88, 89, 19, 9, 41, 57, -55, 2,
	-53, -45, -8, -53, -53, -53, -53, -53, -53, -41,
	-34, -17, 15, 2, -17, -40, 22, -38, 22, 22,
	20, 7, 2, -5, 2, 4, 54, 44, 55, -5,
	20, -15, 25, 2, 25, 2, -19, 5, -29, -21,
	12, -28, -30, 16, -38, 82, 84, 80, 81, -38,
	-38, -38, -38, -38, -38, -38, -38, -38, -38, -38,
	-38, -38, -38, -38, -45, -53, -53, 15, -28, -28,
	21, 6, 2, -16, 22, -4, -6, 25, 2, 62,
	78, 63, 79, 64, 65, 66, 80, 81, 12, 82,
	47, 48, 51, 67, 18, 68, 83, 84, 69, 70,
	71, 72, 73, 88, 89, 59, 74, 75, 22, 7,
	20, -2, 25, 2, 25, 2, 26, 26, -30, 26,
	41, 57, -22, 24, 17, -23, 30, 28, 29, 35,
	36, 37, 33, 31, 34, 32, 38, -17, -17, -18,
	-17, -18, 22, -55, 21, 2, 22, 7, 2, -38,
	-27, 19, -27, 26, -27, -21, -21, 24, 17, 2,
	17, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 21, 2, 22, -4, -27, 26, 26, 17,
	-23, -26, 57, -27, -31, -31, -31, -28, -24, 14,
	-24, -26, -24, -26, -11, 92, 93, 94, 95, -27,
	-27, -27, -25, -31, 24, 21, 2, 21, -31,
}

var yyDef = [...]int16{
	0, -2, 130, 130, 0, 0, 7, 6, 1, 130,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 0, 2, -2, 3, 4,
	8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
	18, 19, 20, 0, 109, 234, 235, 0, 245, 0,
	86, 87, 260, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 228, 229, 0,
	5, 101, 0, 129, 132, 0, 136, 140, 246, 141,
	145, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 23, 24, 0,
	0, 0, 62, 0, 20, 84, -2, 85, 0, 90,
	92, 0, 96, 100, 127, 0, 133, 0, 139, 0,
	144, 0, 43, 48, 49, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 70, 71, 249, 0, 251, 0, 72, 0, 74,
	240, 241, 75, 76, 236, 237, 0, 0, 0, 83,
	69, 252, 0, 254, 255, 256, 257, 258, 259, 21,
	22, 25, 0, 55, 26, 0, 64, 66, 68, 261,
	88, 0, 93, 0, 99, 230, 231, 232, 233, 0,
	128, 131, 134, 137, 135, 138, 143, 146, 148, 151,
	155, 156, 157, 0, 27, 0, 0, -2, -2, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 250, 253, 0, 0, 238, 239,
	77, 0, 82, 0, 54, 57, 59, 60, 61, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 221, 222, 223, 224, 225, 226, 227, 63, 67,
	89, 91, 94, 98, 95, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 161, 163, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 47, 50,
	248, 51, 73, 0, 79, 81, 52, 0, 58, 65,
	147, 242, 149, 0, 152, 0, 0, 0, 159, 164,
	160, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 80, 53, 56, 150, 0, 0, 158,
	162, 165, 0, 244, 166, 167, 168, 169, 170, 0,
	171, 172, 173, 174, 175, 181, 182, 183, 184, 153,
	154, 243, 0, 179, 0, 177, 180, 176, 178,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).addParseErrf(posrange.PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("", "")
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			// Need to consume the position of the first RIGHT_PAREN. It might not exist on garbage input
			// like 'sum (some_metric) by test'
			if len(yylex.(*parser).closingParens) > 1 {
				yylex.(*parser).closingParens = yylex.(*parser).closingParens[1:]
			}
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			// Need to consume the position of the first RIGHT_PAREN. It might not exist on garbage input
			// like 'sum by test (some_metric)'
			if len(yylex.(*parser).closingParens) > 1 {
				yylex.(*parser).closingParens = yylex.(*parser).closingParens[1:]
			}
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 26:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.strings = []string{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if !model.LabelName(yyDollar[1].item.Val).IsValid() {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid label name for grouping: %q", yyDollar[1].item.Val)
			}
			yyVAL.item = yyDollar[1].item
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			unquoted := yylex.(*parser).unquoteString(yyDollar[1].item.Val)
			if !model.LabelName(unquoted).IsValid() {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid label name for grouping: %q", unquoted)
			}
			yyVAL.item = yyDollar[1].item
			yyVAL.item.Pos++
			yyVAL.item.Val = unquoted
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			if fn != nil && fn.Experimental && !EnableExperimentalFunctions {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "function %q is not enabled", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: posrange.PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).closingParens[0],
				},
			}
			yylex.(*parser).closingParens = yylex.(*parser).closingParens[1:]
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = yyDollar[2].node
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = Expressions{}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
			yylex.(*parser).closingParens = yylex.(*parser).closingParens[1:]
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if numLit, ok := yyDollar[1].node.(*NumberLiteral); ok {
				if numLit.Val <= 0 {
					yylex.(*parser).addParseErrf(numLit.PositionRange(), "duration must be greater than 0")
					yyVAL.node = &NumberLiteral{Val: 0} // Return 0 on error.
					break
				}
				yyVAL.node = yyDollar[1].node
				break
			}
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				yylex.(*parser).addOffset(yyDollar[1].node, time.Duration(math.Round(numLit.Val*float64(time.Second))))
				yyVAL.node = yyDollar[1].node
				break
			}
			yylex.(*parser).addOffsetExpr(yyDollar[1].node, yyDollar[3].node.(*DurationExpr))
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("offset", "number or duration")
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, "%s", errMsg)
			}

			var rangeNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(math.Round(numLit.Val * float64(time.Second)))
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          rangeNl,
				RangeExpr:      rangeExpr,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			var rangeNl time.Duration
			var stepNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(math.Round(numLit.Val * float64(time.Second)))
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			if numLit, ok := yyDollar[5].node.(*NumberLiteral); ok {
				stepNl = time.Duration(math.Round(numLit.Val * float64(time.Second)))
			}
			stepExpr, _ := yyDollar[5].node.(*DurationExpr)
			yyVAL.node = &SubqueryExpr{
				Expr:      yyDollar[1].node.(Expr),
				Range:     rangeNl,
				RangeExpr: rangeExpr,
				Step:      stepNl,
				StepExpr:  stepExpr,
				EndPos:    yyDollar[6].item.Pos + 1,
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			var rangeNl time.Duration
			if numLit, ok := yyDollar[3].node.(*NumberLiteral); ok {
				rangeNl = time.Duration(math.Round(numLit.Val * float64(time.Second)))
			}
			rangeExpr, _ := yyDollar[3].node.(*DurationExpr)
			yyVAL.node = &SubqueryExpr{
				Expr:      yyDollar[1].node.(Expr),
				Range:     rangeNl,
				RangeExpr: rangeExpr,
				EndPos:    yyDollar[5].item.Pos + 1,
			}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "number or duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("subquery selector", "number or duration")
			yyVAL.node = yyDollar[1].node
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.matcher = yylex.(*parser).newMetricNameMatcher(yyDollar[1].item)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.labels = labels.New()
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.labels = labels.New()
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.label = labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.series = yyDollar[1].series
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.series = []SequenceValue{{Histogram: yyDollar[1].histogram}}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.series = []SequenceValue{}
			// Add an additional value for time 0, which we ignore in tests.
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Histogram: yyDollar[1].histogram})
				//$1 += $2
			}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			val, err := yylex.(*parser).histogramsIncreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			val, err := yylex.(*parser).histogramsDecreaseSeries(yyDollar[1].histogram, yyDollar[3].histogram, yyDollar[5].uint)
			if err != nil {
				yylex.(*parser).addSemanticError(err)
			}
			yyVAL.series = val
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			m := yylex.(*parser).newMap()
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&m)
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = *(yylex.(*parser).mergeMaps(&yyDollar[1].descriptors, &yyDollar[3].descriptors))
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.descriptors = yyDollar[1].descriptors
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yylex.(*parser).unexpected("histogram description", "histogram description key, e.g. buckets:[5 10 7]")
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["schema"] = yyDollar[3].int
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["sum"] = yyDollar[3].float
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["count"] = yyDollar[3].float
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket"] = yyDollar[3].float
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["z_bucket_w"] = yyDollar[3].float
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["custom_values"] = yyDollar[3].bucket_set
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["buckets"] = yyDollar[3].bucket_set
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["offset"] = yyDollar[3].int
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_buckets"] = yyDollar[3].bucket_set
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["n_offset"] = yyDollar[3].int
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["counter_reset_hint"] = yyDollar[3].item
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.bucket_set = append(yyDollar[1].bucket_set, yyDollar[3].float)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.bucket_set = []float64{yyDollar[1].float}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			var err error
			var dur time.Duration
			dur, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
			yyVAL.node = &NumberLiteral{
				Val:      dur.Seconds(),
				PosRange: yyDollar[1].item.PositionRange(),
				Duration: true,
			}
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			var err error
			var dur time.Duration
			dur, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
			yyVAL.float = dur.Seconds()
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.float = yyDollar[2].float
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.int = -int64(yyDollar[2].uint)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.int = int64(yyDollar[1].uint)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.item = Item{
				Typ: METRIC_IDENTIFIER,
				Pos: yyDollar[1].item.PositionRange().Start,
				Val: yylex.(*parser).unquoteString(yyDollar[1].item.Val),
			}
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.strings = nil
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			nl := yyDollar[1].node.(*NumberLiteral)
			if nl.Val > 1<<63/1e9 || nl.Val < -(1<<63)/1e9 {
				yylex.(*parser).addParseErrf(nl.PosRange, "duration out of range")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = nl
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			nl := yyDollar[2].node.(*NumberLiteral)
			if yyDollar[1].item.Typ == SUB {
				nl.Val *= -1
			}
			if nl.Val > 1<<63/1e9 || nl.Val < -(1<<63)/1e9 {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "duration out of range")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			nl.PosRange.Start = yyDollar[1].item.Pos
			yyVAL.node = nl
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			nl := yyDollar[1].node.(*NumberLiteral)
			if nl.Val > 1<<63/1e9 || nl.Val < -(1<<63)/1e9 {
				yylex.(*parser).addParseErrf(nl.PosRange, "duration out of range")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = nl
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			switch expr := yyDollar[2].node.(type) {
			case *NumberLiteral:
				if yyDollar[1].item.Typ == SUB {
					expr.Val *= -1
				}
				if expr.Val > 1<<63/1e9 || expr.Val < -(1<<63)/1e9 {
					yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "duration out of range")
					yyVAL.node = &NumberLiteral{Val: 0}
					break
				}
				expr.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = expr
				break
			case *DurationExpr:
				if yyDollar[1].item.Typ == SUB {
					yyVAL.node = &DurationExpr{
						Op:       SUB,
						RHS:      expr,
						StartPos: yyDollar[1].item.Pos,
					}
					break
				}
				yyVAL.node = expr
				break
			default:
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "expected number literal or duration expression")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: ADD, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: SUB, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: MUL, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			if nl, ok := yyDollar[3].node.(*NumberLiteral); ok && nl.Val == 0 {
				yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "division by zero")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = &DurationExpr{Op: DIV, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			if nl, ok := yyDollar[3].node.(*NumberLiteral); ok && nl.Val == 0 {
				yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "modulo by zero")
				yyVAL.node = &NumberLiteral{Val: 0}
				break
			}
			yyVAL.node = &DurationExpr{Op: MOD, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[1].node.(Expr))
			yyVAL.node = &DurationExpr{Op: POW, LHS: yyDollar[1].node.(Expr), RHS: yyDollar[3].node.(Expr)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*parser).experimentalDurationExpr(yyDollar[2].node.(Expr))
			if durationExpr, ok := yyDollar[2].node.(*DurationExpr); ok {
				durationExpr.Wrapped = true
				yyVAL.node = durationExpr
				break
			}
			yyVAL.node = yyDollar[2].node
		}
	}
	goto yystack /* stack new state and value */
}
