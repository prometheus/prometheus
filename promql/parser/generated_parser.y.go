// Code generated by goyacc -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.

//line promql/parser/generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line promql/parser/generated_parser.y:15

import (
	"math"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/histogram"
	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
)

//line promql/parser/generated_parser.y:29
type yySymType struct {
	yys         int
	node        Node
	item        Item
	matchers    []*labels.Matcher
	matcher     *labels.Matcher
	label       labels.Label
	labels      labels.Labels
	lblList     []labels.Label
	strings     []string
	series      []SequenceValue
	histogram   *histogram.FloatHistogram
	descriptors map[string]interface{}
	bucket_set  []float64
	uint        uint64
	float       float64
	duration    time.Duration
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const OPEN_HIST = 57358
const CLOSE_HIST = 57359
const METRIC_IDENTIFIER = 57360
const NUMBER = 57361
const RIGHT_BRACE = 57362
const RIGHT_BRACKET = 57363
const RIGHT_PAREN = 57364
const SEMICOLON = 57365
const SPACE = 57366
const STRING = 57367
const TIMES = 57368
const histogramDescStart = 57369
const SUM_DESC = 57370
const COUNT_DESC = 57371
const SCHEMA_DESC = 57372
const OFFSET_DESC = 57373
const BUCKETS_DESC = 57374
const histogramDescEnd = 57375
const operatorsStart = 57376
const ADD = 57377
const DIV = 57378
const EQLC = 57379
const EQL_REGEX = 57380
const GTE = 57381
const GTR = 57382
const LAND = 57383
const LOR = 57384
const LSS = 57385
const LTE = 57386
const LUNLESS = 57387
const MOD = 57388
const MUL = 57389
const NEQ = 57390
const NEQ_REGEX = 57391
const POW = 57392
const SUB = 57393
const AT = 57394
const ATAN2 = 57395
const operatorsEnd = 57396
const aggregatorsStart = 57397
const AVG = 57398
const BOTTOMK = 57399
const COUNT = 57400
const COUNT_VALUES = 57401
const GROUP = 57402
const MAX = 57403
const MIN = 57404
const QUANTILE = 57405
const STDDEV = 57406
const STDVAR = 57407
const SUM = 57408
const TOPK = 57409
const aggregatorsEnd = 57410
const keywordsStart = 57411
const BOOL = 57412
const BY = 57413
const GROUP_LEFT = 57414
const GROUP_RIGHT = 57415
const IGNORING = 57416
const OFFSET = 57417
const ON = 57418
const WITHOUT = 57419
const keywordsEnd = 57420
const preprocessorStart = 57421
const START = 57422
const END = 57423
const preprocessorEnd = 57424
const startSymbolsStart = 57425
const START_METRIC = 57426
const START_SERIES_DESCRIPTION = 57427
const START_EXPRESSION = 57428
const START_METRIC_SELECTOR = 57429
const startSymbolsEnd = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"OPEN_HIST",
	"CLOSE_HIST",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"histogramDescStart",
	"SUM_DESC",
	"COUNT_DESC",
	"SCHEMA_DESC",
	"OFFSET_DESC",
	"BUCKETS_DESC",
	"histogramDescEnd",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/parser/generated_parser.y:837

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 35,
	1, 131,
	10, 131,
	24, 131,
	-2, 0,
	-1, 58,
	2, 157,
	15, 157,
	71, 157,
	77, 157,
	-2, 97,
	-1, 59,
	2, 158,
	15, 158,
	71, 158,
	77, 158,
	-2, 98,
	-1, 60,
	2, 159,
	15, 159,
	71, 159,
	77, 159,
	-2, 100,
	-1, 61,
	2, 160,
	15, 160,
	71, 160,
	77, 160,
	-2, 101,
	-1, 62,
	2, 161,
	15, 161,
	71, 161,
	77, 161,
	-2, 102,
	-1, 63,
	2, 162,
	15, 162,
	71, 162,
	77, 162,
	-2, 107,
	-1, 64,
	2, 163,
	15, 163,
	71, 163,
	77, 163,
	-2, 109,
	-1, 65,
	2, 164,
	15, 164,
	71, 164,
	77, 164,
	-2, 111,
	-1, 66,
	2, 165,
	15, 165,
	71, 165,
	77, 165,
	-2, 112,
	-1, 67,
	2, 166,
	15, 166,
	71, 166,
	77, 166,
	-2, 113,
	-1, 68,
	2, 167,
	15, 167,
	71, 167,
	77, 167,
	-2, 114,
	-1, 69,
	2, 168,
	15, 168,
	71, 168,
	77, 168,
	-2, 115,
	-1, 192,
	12, 213,
	13, 213,
	18, 213,
	19, 213,
	25, 213,
	35, 213,
	41, 213,
	42, 213,
	45, 213,
	51, 213,
	56, 213,
	57, 213,
	58, 213,
	59, 213,
	60, 213,
	61, 213,
	62, 213,
	63, 213,
	64, 213,
	65, 213,
	66, 213,
	67, 213,
	71, 213,
	75, 213,
	77, 213,
	80, 213,
	81, 213,
	-2, 0,
	-1, 193,
	12, 213,
	13, 213,
	18, 213,
	19, 213,
	25, 213,
	35, 213,
	41, 213,
	42, 213,
	45, 213,
	51, 213,
	56, 213,
	57, 213,
	58, 213,
	59, 213,
	60, 213,
	61, 213,
	62, 213,
	63, 213,
	64, 213,
	65, 213,
	66, 213,
	67, 213,
	71, 213,
	75, 213,
	77, 213,
	80, 213,
	81, 213,
	-2, 0,
	-1, 214,
	21, 211,
	-2, 0,
	-1, 269,
	21, 212,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 680

var yyAct = [...]int16{
	275, 259, 218, 37, 142, 264, 265, 150, 113, 77,
	101, 6, 220, 104, 190, 126, 191, 278, 100, 105,
	192, 193, 230, 103, 149, 255, 102, 121, 236, 290,
	57, 261, 287, 260, 154, 253, 106, 257, 282, 144,
	254, 180, 261, 301, 260, 300, 145, 249, 267, 285,
	155, 232, 233, 281, 96, 234, 99, 108, 252, 109,
	280, 296, 248, 247, 179, 122, 221, 223, 225, 226,
	227, 235, 237, 240, 241, 242, 243, 244, 107, 98,
	222, 224, 228, 229, 231, 238, 239, 110, 143, 294,
	245, 246, 104, 2, 3, 4, 5, 299, 105, 215,
	276, 273, 153, 214, 115, 156, 272, 79, 210, 106,
	166, 160, 163, 159, 114, 293, 298, 78, 213, 297,
	72, 271, 250, 11, 7, 177, 189, 178, 158, 187,
	145, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 186, 284, 209, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 162, 172, 220, 173, 286, 170,
	118, 115, 9, 81, 169, 117, 230, 161, 251, 211,
	212, 114, 236, 74, 79, 270, 217, 168, 116, 112,
	283, 256, 145, 157, 78, 34, 1, 262, 263, 266,
	145, 175, 75, 8, 48, 232, 233, 35, 268, 234,
	73, 174, 176, 120, 47, 119, 148, 247, 46, 269,
	221, 223, 225, 226, 227, 235, 237, 240, 241, 242,
	243, 244, 45, 153, 222, 224, 228, 229, 231, 238,
	239, 44, 125, 56, 245, 246, 10, 10, 43, 154,
	42, 41, 123, 274, 51, 72, 277, 53, 279, 164,
	23, 52, 40, 124, 165, 155, 39, 54, 38, 49,
	146, 183, 295, 292, 258, 288, 184, 70, 80, 289,
	181, 216, 291, 19, 20, 76, 147, 21, 55, 219,
	171, 50, 111, 71, 151, 152, 0, 0, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	0, 0, 0, 14, 0, 0, 0, 25, 0, 31,
	0, 0, 32, 33, 36, 100, 51, 72, 0, 53,
	0, 0, 23, 52, 0, 0, 0, 182, 0, 54,
	0, 0, 0, 0, 185, 0, 82, 84, 188, 70,
	0, 153, 0, 0, 0, 19, 20, 93, 94, 21,
	0, 96, 97, 99, 83, 71, 0, 154, 0, 0,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 0, 155, 0, 14, 98, 0, 0, 25,
	0, 31, 0, 0, 32, 33, 51, 72, 0, 53,
	0, 0, 23, 52, 0, 0, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 19, 20, 18, 72, 21,
	100, 0, 0, 23, 0, 71, 0, 0, 0, 0,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 84, 0, 0, 14, 19, 20, 0, 25,
	21, 31, 93, 94, 32, 33, 96, 0, 99, 83,
	0, 12, 13, 15, 16, 17, 22, 24, 26, 27,
	28, 29, 30, 18, 11, 0, 14, 0, 0, 23,
	25, 98, 31, 0, 0, 32, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 19, 20, 0, 0, 21, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 12, 13, 15,
	16, 17, 22, 24, 26, 27, 28, 29, 30, 100,
	0, 0, 14, 0, 0, 0, 25, 167, 31, 0,
	0, 32, 33, 0, 0, 0, 0, 0, 100, 0,
	82, 84, 85, 0, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 0, 96, 97, 99, 83, 82,
	84, 85, 0, 86, 87, 88, 89, 90, 91, 92,
	93, 94, 95, 0, 96, 97, 99, 83, 0, 100,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 98,
	82, 84, 85, 0, 86, 87, 88, 0, 90, 91,
	92, 93, 94, 95, 0, 96, 97, 99, 83, 82,
	84, 85, 0, 86, 87, 0, 0, 90, 91, 0,
	93, 94, 95, 0, 96, 97, 99, 83, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
}

var yyPact = [...]int16{
	9, 114, 471, 471, 314, 415, -1000, -1000, -1000, -1000,
	110, 182, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 171, -1000, 544, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21, 94, -1000, 384, -1000, 384, 107, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 169, -1000, -1000, -1000, 168, -1000, 211, -1000,
	3, -1000, -55, -55, -55, -55, -55, -55, -55, -55,
	-55, -55, -55, -55, -55, -55, -55, -55, 37, 214,
	191, 94, -58, -1000, 162, 162, 242, -1000, 525, 4,
	-1000, 167, -1000, -1000, 163, -1000, -1000, 105, -1000, 39,
	-1000, 332, 384, -1000, -60, -52, -1000, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, -1000, 121, -1000, -1000, -1000, 93, -1000, -1000,
	-1000, -1000, -1000, -1000, 83, 83, 97, -1000, -1000, -1000,
	-1000, 164, -1000, -1000, 40, -1000, 544, -1000, -1000, 102,
	-1000, 33, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14, -1, 11, -1000, -1000, -1000, 1, 416,
	162, 162, 162, 162, 4, 4, 311, 311, 311, 604,
	585, 311, 311, 604, 4, 4, 311, 4, 416, -1000,
	26, -1000, -1000, -1000, 183, -1000, 99, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 384,
	-1000, -1000, -1000, -1000, 81, 81, -9, 81, 36, -1000,
	184, 141, -1000, -1000, -1000, -1000, -1000, -1000, 28, 166,
	-1000, -1000, 10, -1000, 544, -1000, -1000, -1000, 81, -1000,
	12, -1000, -1000, 101, 70, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42, -1000, 95, -1000, 24, -1000, -1000,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 292, 8, 291, 2, 290, 289, 243, 288, 286,
	172, 203, 285, 9, 281, 6, 5, 280, 278, 276,
	274, 1, 273, 272, 0, 24, 271, 7, 270, 269,
	268, 10, 65, 266, 263, 3, 262, 259, 26, 252,
	30, 251, 250, 248, 242, 241, 232, 218, 214, 204,
	4, 208, 196, 195,
}

var yyR1 = [...]int8{
	0, 52, 52, 52, 52, 52, 52, 52, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	30, 30, 30, 30, 31, 31, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 32, 34, 34, 44, 44, 39, 39, 39,
	39, 15, 15, 15, 15, 14, 14, 14, 4, 4,
	36, 38, 38, 37, 37, 37, 45, 43, 43, 43,
	29, 29, 29, 9, 9, 41, 47, 47, 47, 47,
	47, 48, 49, 49, 49, 40, 40, 40, 1, 1,
	1, 2, 2, 2, 2, 11, 11, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 10,
	10, 10, 10, 12, 12, 12, 13, 13, 13, 13,
	53, 18, 18, 18, 18, 17, 17, 17, 17, 17,
	17, 17, 26, 26, 26, 19, 19, 20, 20, 20,
	21, 21, 22, 22, 23, 23, 23, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 8, 8, 5, 5,
	5, 5, 42, 25, 27, 27, 28, 28, 24, 50,
	46, 51, 51, 16, 16,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 1, 0, 1, 3, 3, 1, 1, 3,
	3, 3, 4, 2, 1, 3, 1, 2, 1, 1,
	2, 3, 2, 3, 1, 2, 3, 3, 4, 3,
	3, 5, 3, 1, 1, 4, 6, 6, 5, 4,
	3, 2, 2, 1, 1, 3, 4, 2, 3, 1,
	2, 3, 3, 2, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 4, 0, 3, 1, 2, 3, 3, 2, 1,
	2, 0, 3, 2, 1, 1, 3, 1, 3, 4,
	1, 3, 1, 1, 1, 4, 3, 3, 1, 2,
	3, 3, 4, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -52, 84, 85, 86, 87, 2, 10, -11, -10,
	-7, 13, 56, 57, 71, 58, 59, 60, 12, 41,
	42, 45, 61, 18, 62, 75, 63, 64, 65, 66,
	67, 77, 80, 81, -53, -11, 10, -35, -30, -33,
	-36, -41, -42, -43, -45, -46, -47, -48, -49, -29,
	-3, 12, 19, 15, 25, -8, -7, -40, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	35, 51, 13, -49, -10, 20, -12, -13, 12, 2,
	-18, 2, 35, 53, 36, 37, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 50, 51, 75, 52,
	14, -31, -38, 2, 71, 77, 15, -38, -35, -35,
	-40, -1, 20, -2, 12, 2, 20, 7, 2, 4,
	2, 24, -32, -39, -34, -44, 70, -32, -32, -32,
	-32, -32, -32, -32, -32, -32, -32, -32, -32, -32,
	-32, -32, -50, 51, 2, 9, -28, -9, 2, -25,
	-27, 80, 81, 19, 35, 51, -50, 2, -38, -31,
	-15, 15, 2, -15, -37, 22, -35, 22, 20, 7,
	2, -5, 2, 4, 48, 38, 49, 20, -13, 25,
	2, -17, 5, -26, -19, 12, -25, -27, 16, -35,
	74, 76, 72, 73, -35, -35, -35, -35, -35, -35,
	-35, -35, -35, -35, -35, -35, -35, -35, -35, -50,
	15, -25, -25, 21, 6, 2, -14, 22, -4, -6,
	2, 56, 70, 57, 71, 58, 59, 60, 72, 73,
	12, 74, 41, 42, 45, 61, 18, 62, 75, 76,
	63, 64, 65, 66, 67, 80, 81, 53, 22, 7,
	20, -2, 25, 2, 26, 26, -27, 26, -20, -21,
	32, 30, -15, -15, -16, -15, -16, 22, -51, -50,
	2, 22, 7, 2, -35, -24, 19, -24, 26, -24,
	24, 17, 2, 6, 6, 21, 2, 22, -4, -24,
	17, -21, -22, 14, 19, -23, 19, 24, 21, 2,
	21, 19,
}

var yyDef = [...]int16{
	0, -2, 122, 122, 0, 0, 7, 6, 1, 95,
	122, 0, 97, 98, 99, 100, 101, 102, 103, 104,
	105, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	115, 116, 117, 118, 2, -2, 3, 4, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	0, 103, 202, 0, 210, 0, 83, 84, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	196, 197, 0, 5, 96, 119, 0, 124, 0, 129,
	130, 134, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 0, 0,
	0, 0, 22, 23, 0, 0, 0, 60, 0, 81,
	82, 0, 87, 89, 0, 94, 120, 0, 125, 0,
	128, 133, 0, 42, 47, 48, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 69, 209, 70, 0, 72, 206,
	207, 73, 74, 203, 0, 0, 0, 80, 20, 21,
	24, 0, 54, 25, 0, 62, 64, 66, 85, 0,
	90, 0, 93, 198, 199, 200, 201, 121, 123, 126,
	127, 132, 135, 137, 140, 142, 143, 144, 0, 26,
	0, 0, -2, -2, 27, 28, 29, 30, 31, 32,
	33, 34, 35, 36, 37, 38, 39, 40, 41, 68,
	0, 204, 205, 75, -2, 79, 0, 53, 56, 58,
	59, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 61, 65,
	86, 88, 91, 92, 0, 0, 0, 0, 0, 148,
	0, 0, 45, 46, 49, 214, 50, 71, 0, -2,
	78, 51, 0, 57, 63, 136, 208, 138, 0, 141,
	0, 146, 149, 0, 0, 76, 77, 52, 55, 139,
	145, 147, 150, 0, 151, 0, 155, 0, 153, 156,
	152, 154,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:193
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:196
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:198
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:200
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:203
		{
			yylex.(*parser).unexpected("", "")
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:226
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:228
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:230
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:232
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:240
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:246
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:259
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:260
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:261
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:262
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:263
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:264
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:265
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:266
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:267
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:268
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:269
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:270
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:271
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:272
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:273
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:274
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:282
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:287
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:295
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:300
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:310
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:316
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:325
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:327
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:329
		{
			yyVAL.strings = []string{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:331
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:337
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:339
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:341
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:345
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:352
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:360
		{
			fn, exist := getFunction(yyDollar[1].item.Val, yylex.(*parser).functions)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:377
		{
			yyVAL.node = yyDollar[2].node
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:379
		{
			yyVAL.node = Expressions{}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:383
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:385
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:387
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:398
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:406
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:411
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:416
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:423
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:428
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:433
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:443
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:468
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:478
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:480
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:482
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:484
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:494
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:512
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:520
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:530
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:538
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:545
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:552
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:561
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:569
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:571
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:575
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:577
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:579
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:581
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:589
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:591
		{
			b := labels.NewBuilder(yyDollar[2].labels)
			b.Set(labels.MetricName, yyDollar[1].item.Val)
			yyVAL.labels = b.Labels()
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:598
		{
			yyVAL.labels = labels.New()
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:600
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:602
		{
			yyVAL.labels = labels.New(yyDollar[2].lblList...)
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:604
		{
			yyVAL.labels = labels.New()
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:608
		{
			yyVAL.lblList = append(yyDollar[1].lblList, yyDollar[3].label)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:610
		{
			yyVAL.lblList = []labels.Label{yyDollar[1].label}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:612
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.lblList = yyDollar[1].lblList
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:617
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:619
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:621
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:623
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:632
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{labels: yyDollar[1].labels, values: yyDollar[2].series} // TODO
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:638
		{
			yyVAL.series = []SequenceValue{}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:640
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:642
		{
			yyVAL.series = yyDollar[1].series
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:644
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:648
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:650
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:657
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:659
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:666
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:674
		{
			yyVAL.series = []SequenceValue{{Histogram: yyDollar[1].histogram}}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:678
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Histogram: yyDollar[1].histogram})
				//$1 += $2
			}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:688
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:703
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:707
		{
			yyVAL.histogram = yylex.(*parser).buildHistogramFromMap(&yyDollar[2].descriptors)
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:714
		{
			yyVAL.descriptors = *(yylex.(*parser).mergeMaps(&yyDollar[1].descriptors, &yyDollar[3].descriptors))
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:718
		{
			yyVAL.descriptors = yyDollar[1].descriptors
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:721
		{
			yylex.(*parser).unexpected("series values", "number or \"stale\"")
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:727
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["buckets"] = yyDollar[3].bucket_set
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:732
		{
			yyVAL.descriptors = yylex.(*parser).newMap()
			yyVAL.descriptors["schema"] = yylex.(*parser).integer(yyDollar[3].item.Val)
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:739
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:743
		{
			yyVAL.bucket_set = yyDollar[2].bucket_set
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:749
		{
			yyVAL.bucket_set = append(yyDollar[1].bucket_set, yylex.(*parser).number(yyDollar[3].item.Val))
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:753
		{
			yyVAL.bucket_set = []float64{yylex.(*parser).number(yyDollar[1].item.Val)}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:778
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:786
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:788
		{
			yyVAL.float = yyDollar[2].float
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:789
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:795
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:805
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:816
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:829
		{
			yyVAL.duration = 0
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:833
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
