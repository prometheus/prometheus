// Code generated by goyacc -o promql/parser/generated_parser.y.go promql/parser/generated_parser.y. DO NOT EDIT.

//line promql/parser/generated_parser.y:15
package parser

import __yyfmt__ "fmt"

//line promql/parser/generated_parser.y:15

import (
	"math"
	"sort"
	"strconv"
	"time"

	"github.com/prometheus/prometheus/model/labels"
	"github.com/prometheus/prometheus/model/value"
)

//line promql/parser/generated_parser.y:28
type yySymType struct {
	yys       int
	node      Node
	item      Item
	matchers  []*labels.Matcher
	matcher   *labels.Matcher
	label     labels.Label
	labels    labels.Labels
	strings   []string
	series    []SequenceValue
	buckets   [][]SequenceValue
	uint      uint64
	uints     []uint64
	float     float64
	duration  time.Duration
	histogram Histogram
}

const EQL = 57346
const BLANK = 57347
const COLON = 57348
const COMMA = 57349
const COMMENT = 57350
const DURATION = 57351
const EOF = 57352
const ERROR = 57353
const IDENTIFIER = 57354
const LEFT_BRACE = 57355
const LEFT_BRACKET = 57356
const LEFT_PAREN = 57357
const METRIC_IDENTIFIER = 57358
const NUMBER = 57359
const RIGHT_BRACE = 57360
const RIGHT_BRACKET = 57361
const RIGHT_PAREN = 57362
const SEMICOLON = 57363
const SPACE = 57364
const STRING = 57365
const TIMES = 57366
const operatorsStart = 57367
const ADD = 57368
const DIV = 57369
const EQLC = 57370
const EQL_REGEX = 57371
const GTE = 57372
const GTR = 57373
const LAND = 57374
const LOR = 57375
const LSS = 57376
const LTE = 57377
const LUNLESS = 57378
const MOD = 57379
const MUL = 57380
const NEQ = 57381
const NEQ_REGEX = 57382
const POW = 57383
const SUB = 57384
const AT = 57385
const ATAN2 = 57386
const operatorsEnd = 57387
const aggregatorsStart = 57388
const AVG = 57389
const BOTTOMK = 57390
const COUNT = 57391
const COUNT_VALUES = 57392
const GROUP = 57393
const MAX = 57394
const MIN = 57395
const QUANTILE = 57396
const STDDEV = 57397
const STDVAR = 57398
const SUM = 57399
const TOPK = 57400
const aggregatorsEnd = 57401
const keywordsStart = 57402
const BOOL = 57403
const BY = 57404
const GROUP_LEFT = 57405
const GROUP_RIGHT = 57406
const IGNORING = 57407
const OFFSET = 57408
const ON = 57409
const WITHOUT = 57410
const keywordsEnd = 57411
const preprocessorStart = 57412
const START = 57413
const END = 57414
const preprocessorEnd = 57415
const histogramDescStart = 57416
const SCHEMA = 57417
const BUCKETS = 57418
const histogramDescEnd = 57419
const startSymbolsStart = 57420
const START_METRIC = 57421
const START_SERIES_DESCRIPTION = 57422
const START_EXPRESSION = 57423
const START_METRIC_SELECTOR = 57424
const startSymbolsEnd = 57425

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"EQL",
	"BLANK",
	"COLON",
	"COMMA",
	"COMMENT",
	"DURATION",
	"EOF",
	"ERROR",
	"IDENTIFIER",
	"LEFT_BRACE",
	"LEFT_BRACKET",
	"LEFT_PAREN",
	"METRIC_IDENTIFIER",
	"NUMBER",
	"RIGHT_BRACE",
	"RIGHT_BRACKET",
	"RIGHT_PAREN",
	"SEMICOLON",
	"SPACE",
	"STRING",
	"TIMES",
	"operatorsStart",
	"ADD",
	"DIV",
	"EQLC",
	"EQL_REGEX",
	"GTE",
	"GTR",
	"LAND",
	"LOR",
	"LSS",
	"LTE",
	"LUNLESS",
	"MOD",
	"MUL",
	"NEQ",
	"NEQ_REGEX",
	"POW",
	"SUB",
	"AT",
	"ATAN2",
	"operatorsEnd",
	"aggregatorsStart",
	"AVG",
	"BOTTOMK",
	"COUNT",
	"COUNT_VALUES",
	"GROUP",
	"MAX",
	"MIN",
	"QUANTILE",
	"STDDEV",
	"STDVAR",
	"SUM",
	"TOPK",
	"aggregatorsEnd",
	"keywordsStart",
	"BOOL",
	"BY",
	"GROUP_LEFT",
	"GROUP_RIGHT",
	"IGNORING",
	"OFFSET",
	"ON",
	"WITHOUT",
	"keywordsEnd",
	"preprocessorStart",
	"START",
	"END",
	"preprocessorEnd",
	"histogramDescStart",
	"SCHEMA",
	"BUCKETS",
	"histogramDescEnd",
	"startSymbolsStart",
	"START_METRIC",
	"START_SERIES_DESCRIPTION",
	"START_EXPRESSION",
	"START_METRIC_SELECTOR",
	"startSymbolsEnd",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line promql/parser/generated_parser.y:844

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 35,
	1, 145,
	10, 145,
	22, 145,
	-2, 0,
	-1, 58,
	2, 157,
	15, 157,
	62, 157,
	68, 157,
	-2, 97,
	-1, 59,
	2, 158,
	15, 158,
	62, 158,
	68, 158,
	-2, 98,
	-1, 60,
	2, 159,
	15, 159,
	62, 159,
	68, 159,
	-2, 100,
	-1, 61,
	2, 160,
	15, 160,
	62, 160,
	68, 160,
	-2, 101,
	-1, 62,
	2, 161,
	15, 161,
	62, 161,
	68, 161,
	-2, 102,
	-1, 63,
	2, 162,
	15, 162,
	62, 162,
	68, 162,
	-2, 107,
	-1, 64,
	2, 163,
	15, 163,
	62, 163,
	68, 163,
	-2, 109,
	-1, 65,
	2, 164,
	15, 164,
	62, 164,
	68, 164,
	-2, 111,
	-1, 66,
	2, 165,
	15, 165,
	62, 165,
	68, 165,
	-2, 112,
	-1, 67,
	2, 166,
	15, 166,
	62, 166,
	68, 166,
	-2, 113,
	-1, 68,
	2, 167,
	15, 167,
	62, 167,
	68, 167,
	-2, 114,
	-1, 69,
	2, 168,
	15, 168,
	62, 168,
	68, 168,
	-2, 115,
	-1, 199,
	12, 213,
	13, 213,
	16, 213,
	17, 213,
	23, 213,
	26, 213,
	32, 213,
	33, 213,
	36, 213,
	42, 213,
	47, 213,
	48, 213,
	49, 213,
	50, 213,
	51, 213,
	52, 213,
	53, 213,
	54, 213,
	55, 213,
	56, 213,
	57, 213,
	58, 213,
	62, 213,
	66, 213,
	68, 213,
	71, 213,
	72, 213,
	-2, 0,
	-1, 200,
	12, 213,
	13, 213,
	16, 213,
	17, 213,
	23, 213,
	26, 213,
	32, 213,
	33, 213,
	36, 213,
	42, 213,
	47, 213,
	48, 213,
	49, 213,
	50, 213,
	51, 213,
	52, 213,
	53, 213,
	54, 213,
	55, 213,
	56, 213,
	57, 213,
	58, 213,
	62, 213,
	66, 213,
	68, 213,
	71, 213,
	72, 213,
	-2, 0,
	-1, 221,
	19, 211,
	-2, 0,
	-1, 275,
	19, 212,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 647

var yyAct = [...]int16{
	297, 281, 225, 37, 145, 270, 271, 191, 189, 115,
	77, 106, 104, 188, 103, 195, 197, 107, 198, 284,
	192, 199, 200, 102, 195, 298, 6, 129, 261, 123,
	273, 227, 282, 290, 285, 84, 86, 87, 264, 88,
	89, 237, 105, 92, 93, 243, 95, 96, 97, 292,
	98, 99, 101, 85, 57, 108, 262, 110, 157, 111,
	300, 239, 240, 156, 109, 241, 125, 217, 124, 108,
	72, 33, 299, 254, 158, 100, 228, 230, 232, 233,
	234, 242, 244, 247, 248, 249, 250, 251, 194, 193,
	229, 231, 235, 236, 238, 245, 246, 194, 193, 260,
	252, 253, 106, 2, 3, 4, 5, 159, 107, 256,
	153, 112, 169, 163, 166, 152, 161, 117, 165, 162,
	259, 83, 255, 7, 267, 291, 148, 116, 266, 196,
	181, 164, 82, 257, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 186,
	102, 216, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 144, 147, 183, 288,
	279, 218, 219, 187, 148, 278, 190, 98, 156, 101,
	301, 287, 258, 227, 175, 187, 176, 157, 277, 182,
	156, 276, 296, 237, 122, 263, 121, 243, 148, 157,
	265, 224, 100, 158, 268, 269, 272, 146, 79, 160,
	10, 178, 34, 239, 240, 158, 148, 241, 78, 1,
	74, 177, 179, 222, 180, 254, 275, 221, 228, 230,
	232, 233, 234, 242, 244, 247, 248, 249, 250, 251,
	220, 286, 229, 231, 235, 236, 238, 245, 246, 295,
	80, 173, 252, 253, 51, 72, 172, 53, 22, 52,
	280, 120, 168, 117, 283, 54, 119, 171, 70, 289,
	48, 274, 79, 116, 18, 19, 73, 118, 20, 114,
	47, 293, 78, 8, 71, 46, 294, 35, 76, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 302, 56, 45, 13, 9, 9, 44, 24, 128,
	30, 43, 42, 31, 32, 36, 41, 51, 72, 126,
	53, 22, 52, 167, 151, 40, 127, 39, 54, 38,
	49, 70, 149, 81, 184, 223, 75, 18, 19, 156,
	150, 20, 55, 226, 174, 50, 113, 71, 157, 0,
	0, 0, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 158, 0, 0, 13, 0, 0,
	0, 24, 0, 30, 0, 0, 31, 32, 51, 72,
	0, 53, 22, 52, 0, 0, 0, 0, 0, 54,
	0, 0, 70, 154, 155, 0, 0, 0, 18, 19,
	0, 0, 20, 0, 0, 17, 72, 0, 71, 22,
	0, 0, 0, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 18, 19, 0, 13, 20,
	0, 0, 24, 0, 30, 0, 0, 31, 32, 0,
	11, 12, 14, 15, 16, 21, 23, 25, 26, 27,
	28, 29, 17, 33, 0, 13, 22, 0, 0, 24,
	0, 30, 185, 0, 31, 32, 0, 0, 0, 187,
	0, 0, 18, 19, 156, 0, 20, 0, 0, 0,
	0, 0, 0, 157, 0, 0, 0, 11, 12, 14,
	15, 16, 21, 23, 25, 26, 27, 28, 29, 158,
	0, 102, 13, 0, 0, 0, 24, 170, 30, 0,
	0, 31, 32, 84, 86, 87, 0, 88, 89, 90,
	91, 92, 93, 94, 95, 96, 97, 102, 98, 99,
	101, 85, 0, 0, 0, 0, 0, 0, 0, 84,
	86, 87, 0, 88, 89, 90, 91, 92, 93, 94,
	95, 96, 97, 100, 98, 99, 101, 85, 0, 0,
	102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 86, 87, 0, 88, 89, 90, 100,
	92, 93, 94, 95, 96, 97, 102, 98, 99, 101,
	85, 0, 0, 0, 102, 0, 0, 0, 84, 86,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 95,
	96, 0, 100, 98, 99, 101, 85, 95, 96, 0,
	0, 98, 0, 101, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 100,
}

var yyPact = [...]int16{
	24, 113, 440, 440, 305, 393, -1000, -1000, -1000, 58,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 270, -1000, 119, -1000, 513, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	40, 54, -1000, 366, -1000, 366, 57, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 261, -1000, -1000, 259, -1000, -1000, 192, -1000,
	-1000, 7, 55, -1000, -34, -34, -34, -34, -34, -34,
	-34, -34, -34, -34, -34, -34, -34, -34, -34, -34,
	165, 322, 207, 54, -51, -1000, 116, 116, 242, -1000,
	487, 136, -1000, 249, -1000, -1000, 182, -1000, -1000, 206,
	-1000, 166, -1000, 457, 13, 366, -1000, -49, -42, -1000,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 366, 366, 366, -1000, 117, -1000, -1000, -1000,
	52, -1000, -1000, -1000, -1000, -1000, -1000, 46, 46, 221,
	-1000, -1000, -1000, -1000, 181, -1000, -1000, 102, -1000, 513,
	-1000, -1000, 115, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 4, 32, -1000, -1000, -1000,
	20, -1000, 22, 122, 118, -1000, 580, 116, 116, 116,
	116, 136, 136, 572, 572, 572, 9, 546, 572, 572,
	9, 136, 136, 572, 136, 580, -1000, 10, -1000, -1000,
	-1000, 189, -1000, 168, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 366, -1000, -1000, -1000,
	-1000, 15, 15, -5, 16, -1000, 167, 15, -1000, -1000,
	-1000, -1000, -1000, -1000, 14, 123, -1000, -1000, 29, -1000,
	513, -1000, -1000, -1000, 15, -1000, -1000, 173, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 53, -1000, -1000, -1000, -1000,
	161, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 346, 9, 345, 2, 344, 343, 302, 342, 340,
	210, 336, 283, 10, 335, 6, 5, 334, 333, 1,
	13, 25, 8, 332, 330, 329, 14, 66, 327, 326,
	3, 325, 323, 12, 319, 54, 316, 312, 311, 309,
	307, 303, 285, 280, 270, 4, 271, 7, 250, 0,
	249, 241, 219, 212, 176,
}

var yyR1 = [...]int8{
	0, 52, 52, 52, 52, 52, 52, 52, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	25, 25, 25, 25, 26, 26, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 27, 29, 29, 39, 39, 34, 34, 34,
	34, 15, 15, 15, 15, 14, 14, 14, 4, 4,
	31, 33, 33, 32, 32, 32, 40, 38, 38, 38,
	24, 24, 24, 9, 9, 36, 42, 42, 42, 42,
	42, 43, 44, 44, 44, 35, 35, 35, 1, 1,
	1, 2, 2, 2, 2, 12, 12, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 10,
	10, 10, 10, 11, 11, 11, 13, 13, 13, 13,
	53, 53, 48, 54, 54, 47, 47, 47, 51, 51,
	51, 51, 50, 50, 49, 18, 18, 18, 18, 17,
	17, 17, 17, 17, 21, 21, 21, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 8, 8, 5, 5,
	5, 5, 37, 20, 22, 22, 23, 23, 19, 45,
	41, 46, 46, 16, 16,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 2, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 1, 0, 1, 3, 3, 1, 1, 3,
	3, 3, 4, 2, 1, 3, 1, 2, 1, 1,
	2, 3, 2, 3, 1, 2, 3, 3, 4, 3,
	3, 5, 3, 1, 1, 4, 6, 6, 5, 4,
	3, 2, 2, 1, 1, 3, 4, 2, 3, 1,
	2, 3, 3, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 2, 0, 3, 1, 2, 3, 3, 2, 1,
	2, 2, 5, 1, 2, 3, 3, 1, 3, 4,
	2, 1, 3, 1, 1, 0, 3, 2, 1, 1,
	3, 1, 3, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	1, 0, 1, 0, 1,
}

var yyChk = [...]int16{
	-1000, -52, 79, 80, 81, 82, 2, 10, -12, -7,
	-10, 47, 48, 62, 49, 50, 51, 12, 32, 33,
	36, 52, 16, 53, 66, 54, 55, 56, 57, 58,
	68, 71, 72, 13, -53, -12, 10, -30, -25, -28,
	-31, -36, -37, -38, -40, -41, -42, -43, -44, -24,
	-3, 12, 17, 15, 23, -8, -7, -35, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	26, 42, 13, -44, -10, -11, 18, -13, 12, 2,
	-48, -18, 13, 2, 26, 44, 27, 28, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 41, 42,
	66, 43, 14, -26, -33, 2, 62, 68, 15, -33,
	-30, -30, -35, -1, 18, -2, 12, 2, 18, 7,
	2, 4, 2, 22, 13, -27, -34, -29, -39, 61,
	-27, -27, -27, -27, -27, -27, -27, -27, -27, -27,
	-27, -27, -27, -27, -27, -45, 42, 2, 9, -23,
	-9, 2, -20, -22, 71, 72, 17, 26, 42, -45,
	2, -33, -26, -15, 15, 2, -15, -32, 20, -30,
	20, 18, 7, 2, -5, 2, 4, 39, 29, 40,
	18, -13, 23, 2, -17, 5, -21, 12, -20, -22,
	-54, -47, 7, 76, 75, 2, -30, 65, 67, 63,
	64, -30, -30, -30, -30, -30, -30, -30, -30, -30,
	-30, -30, -30, -30, -30, -30, -45, 15, -20, -20,
	19, 6, 2, -14, 20, -4, -6, 2, 47, 61,
	48, 62, 49, 50, 51, 63, 64, 12, 65, 32,
	33, 36, 52, 16, 53, 66, 67, 54, 55, 56,
	57, 58, 71, 72, 44, 20, 7, 18, -2, 23,
	2, 24, 24, -22, 18, -47, 6, 6, -15, -15,
	-16, -15, -16, 20, -46, -45, 2, 20, 7, 2,
	-30, -19, 17, -19, 24, 18, -51, 14, 2, -19,
	19, 2, 20, -4, -19, -50, 19, -49, -21, 19,
	7, 19, -49,
}

var yyDef = [...]int16{
	0, -2, 122, 122, 0, 0, 7, 6, 1, 122,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105,
	106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 0, 2, -2, 3, 4, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	0, 103, 202, 0, 210, 0, 83, 84, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	196, 197, 0, 5, 95, 0, 121, 124, 0, 129,
	130, 131, 0, 148, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	0, 0, 0, 0, 22, 23, 0, 0, 0, 60,
	0, 81, 82, 0, 87, 89, 0, 94, 119, 0,
	125, 0, 128, 147, 0, 0, 42, 47, 48, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 0, 69, 209, 70,
	0, 72, 206, 207, 73, 74, 203, 0, 0, 0,
	80, 20, 21, 24, 0, 54, 25, 0, 62, 64,
	66, 85, 0, 90, 0, 93, 198, 199, 200, 201,
	120, 123, 126, 127, 146, 149, 151, 154, 155, 156,
	0, 133, 0, 0, 0, 137, 26, 0, 0, -2,
	-2, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 68, 0, 204, 205,
	75, -2, 79, 0, 53, 56, 58, 59, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 61, 65, 86, 88, 91,
	92, 0, 0, 0, 0, 134, 0, 0, 45, 46,
	49, 214, 50, 71, 0, -2, 78, 51, 0, 57,
	63, 150, 208, 152, 0, 132, 135, 0, 141, 136,
	76, 77, 52, 55, 153, 0, 140, 143, 144, 138,
	0, 139, 142,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:185
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].labels
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:188
		{
			yylex.(*parser).addParseErrf(PositionRange{}, "no expression found in input")
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:190
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:192
		{
			yylex.(*parser).generatedParserResult = yyDollar[2].node
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:195
		{
			yylex.(*parser).unexpected("", "")
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:218
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[2].node, yyDollar[3].node)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:220
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, yyDollar[3].node, yyDollar[2].node)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:222
		{
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, yyDollar[2].node)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:224
		{
			yylex.(*parser).unexpected("aggregation", "")
			yyVAL.node = yylex.(*parser).newAggregateExpr(yyDollar[1].item, &AggregateExpr{}, Expressions{})
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:232
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:238
		{
			yyVAL.node = &AggregateExpr{
				Grouping: yyDollar[2].strings,
				Without:  true,
			}
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:251
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:252
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:253
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:254
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:255
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:256
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:257
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:258
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:259
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:260
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:261
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:262
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:263
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:264
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:265
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:266
		{
			yyVAL.node = yylex.(*parser).newBinaryExpression(yyDollar[1].node, yyDollar[2].item, yyDollar[3].node, yyDollar[4].node)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:274
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
			}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:279
		{
			yyVAL.node = &BinaryExpr{
				VectorMatching: &VectorMatching{Card: CardOneToOne},
				ReturnBool:     true,
			}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:287
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:292
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.MatchingLabels = yyDollar[3].strings
			yyVAL.node.(*BinaryExpr).VectorMatching.On = true
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:302
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardManyToOne
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:308
		{
			yyVAL.node = yyDollar[1].node
			yyVAL.node.(*BinaryExpr).VectorMatching.Card = CardOneToMany
			yyVAL.node.(*BinaryExpr).VectorMatching.Include = yyDollar[3].strings
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:317
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:319
		{
			yyVAL.strings = yyDollar[2].strings
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:321
		{
			yyVAL.strings = []string{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:323
		{
			yylex.(*parser).unexpected("grouping opts", "\"(\"")
			yyVAL.strings = nil
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:329
		{
			yyVAL.strings = append(yyDollar[1].strings, yyDollar[3].item.Val)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:331
		{
			yyVAL.strings = []string{yyDollar[1].item.Val}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:333
		{
			yylex.(*parser).unexpected("grouping opts", "\",\" or \")\"")
			yyVAL.strings = yyDollar[1].strings
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:337
		{
			if !isLabel(yyDollar[1].item.Val) {
				yylex.(*parser).unexpected("grouping opts", "label")
			}
			yyVAL.item = yyDollar[1].item
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:344
		{
			yylex.(*parser).unexpected("grouping opts", "label")
			yyVAL.item = Item{}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:352
		{
			fn, exist := getFunction(yyDollar[1].item.Val)
			if !exist {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "unknown function with name %q", yyDollar[1].item.Val)
			}
			yyVAL.node = &Call{
				Func: fn,
				Args: yyDollar[2].node.(Expressions),
				PosRange: PositionRange{
					Start: yyDollar[1].item.Pos,
					End:   yylex.(*parser).lastClosing,
				},
			}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:369
		{
			yyVAL.node = yyDollar[2].node
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:371
		{
			yyVAL.node = Expressions{}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:375
		{
			yyVAL.node = append(yyDollar[1].node.(Expressions), yyDollar[3].node.(Expr))
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:377
		{
			yyVAL.node = Expressions{yyDollar[1].node.(Expr)}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:379
		{
			yylex.(*parser).addParseErrf(yyDollar[2].item.PositionRange(), "trailing commas not allowed in function call args")
			yyVAL.node = yyDollar[1].node
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:390
		{
			yyVAL.node = &ParenExpr{Expr: yyDollar[2].node.(Expr), PosRange: mergeRanges(&yyDollar[1].item, &yyDollar[3].item)}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:398
		{
			yylex.(*parser).addOffset(yyDollar[1].node, yyDollar[3].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:403
		{
			yylex.(*parser).addOffset(yyDollar[1].node, -yyDollar[4].duration)
			yyVAL.node = yyDollar[1].node
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:408
		{
			yylex.(*parser).unexpected("offset", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:415
		{
			yylex.(*parser).setTimestamp(yyDollar[1].node, yyDollar[3].float)
			yyVAL.node = yyDollar[1].node
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:420
		{
			yylex.(*parser).setAtModifierPreprocessor(yyDollar[1].node, yyDollar[3].item)
			yyVAL.node = yyDollar[1].node
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:425
		{
			yylex.(*parser).unexpected("@", "timestamp")
			yyVAL.node = yyDollar[1].node
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:435
		{
			var errMsg string
			vs, ok := yyDollar[1].node.(*VectorSelector)
			if !ok {
				errMsg = "ranges only allowed for vector selectors"
			} else if vs.OriginalOffset != 0 {
				errMsg = "no offset modifiers allowed before range"
			} else if vs.Timestamp != nil {
				errMsg = "no @ modifiers allowed before range"
			}

			if errMsg != "" {
				errRange := mergeRanges(&yyDollar[2].item, &yyDollar[4].item)
				yylex.(*parser).addParseErrf(errRange, errMsg)
			}

			yyVAL.node = &MatrixSelector{
				VectorSelector: yyDollar[1].node.(Expr),
				Range:          yyDollar[3].duration,
				EndPos:         yylex.(*parser).lastClosing,
			}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:460
		{
			yyVAL.node = &SubqueryExpr{
				Expr:  yyDollar[1].node.(Expr),
				Range: yyDollar[3].duration,
				Step:  yyDollar[5].duration,

				EndPos: yyDollar[6].item.Pos + 1,
			}
		}
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
//line promql/parser/generated_parser.y:470
		{
			yylex.(*parser).unexpected("subquery selector", "\"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:472
		{
			yylex.(*parser).unexpected("subquery selector", "duration or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:474
		{
			yylex.(*parser).unexpected("subquery or range", "\":\" or \"]\"")
			yyVAL.node = yyDollar[1].node
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:476
		{
			yylex.(*parser).unexpected("subquery selector", "duration")
			yyVAL.node = yyDollar[1].node
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:486
		{
			if nl, ok := yyDollar[2].node.(*NumberLiteral); ok {
				if yyDollar[1].item.Typ == SUB {
					nl.Val *= -1
				}
				nl.PosRange.Start = yyDollar[1].item.Pos
				yyVAL.node = nl
			} else {
				yyVAL.node = &UnaryExpr{Op: yyDollar[1].item.Typ, Expr: yyDollar[2].node.(Expr), StartPos: yyDollar[1].item.Pos}
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:504
		{
			vs := yyDollar[2].node.(*VectorSelector)
			vs.PosRange = mergeRanges(&yyDollar[1].item, vs)
			vs.Name = yyDollar[1].item.Val
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:512
		{
			vs := &VectorSelector{
				Name:          yyDollar[1].item.Val,
				LabelMatchers: []*labels.Matcher{},
				PosRange:      yyDollar[1].item.PositionRange(),
			}
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:522
		{
			vs := yyDollar[1].node.(*VectorSelector)
			yylex.(*parser).assembleVectorSelector(vs)
			yyVAL.node = vs
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:530
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[3].item),
			}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:537
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: yyDollar[2].matchers,
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[4].item),
			}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:544
		{
			yyVAL.node = &VectorSelector{
				LabelMatchers: []*labels.Matcher{},
				PosRange:      mergeRanges(&yyDollar[1].item, &yyDollar[2].item),
			}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:553
		{
			if yyDollar[1].matchers != nil {
				yyVAL.matchers = append(yyDollar[1].matchers, yyDollar[3].matcher)
			} else {
				yyVAL.matchers = yyDollar[1].matchers
			}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:561
		{
			yyVAL.matchers = []*labels.Matcher{yyDollar[1].matcher}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:563
		{
			yylex.(*parser).unexpected("label matching", "\",\" or \"}\"")
			yyVAL.matchers = yyDollar[1].matchers
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:567
		{
			yyVAL.matcher = yylex.(*parser).newLabelMatcher(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:569
		{
			yylex.(*parser).unexpected("label matching", "string")
			yyVAL.matcher = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:571
		{
			yylex.(*parser).unexpected("label matching", "label matching operator")
			yyVAL.matcher = nil
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:573
		{
			yylex.(*parser).unexpected("label matching", "identifier or \"}\"")
			yyVAL.matcher = nil
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:581
		{
			yyVAL.labels = append(yyDollar[2].labels, labels.Label{Name: labels.MetricName, Value: yyDollar[1].item.Val})
			sort.Sort(yyVAL.labels)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:583
		{
			yyVAL.labels = yyDollar[1].labels
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:590
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:592
		{
			yyVAL.labels = labels.New(yyDollar[2].labels...)
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:594
		{
			yyVAL.labels = labels.New()
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:596
		{
			yyVAL.labels = labels.New()
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:600
		{
			yyVAL.labels = append(yyDollar[1].labels, yyDollar[3].label)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:602
		{
			yyVAL.labels = []labels.Label{yyDollar[1].label}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:604
		{
			yylex.(*parser).unexpected("label set", "\",\" or \"}\"")
			yyVAL.labels = yyDollar[1].labels
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:609
		{
			yyVAL.label = labels.Label{Name: yyDollar[1].item.Val, Value: yylex.(*parser).unquoteString(yyDollar[3].item.Val)}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:611
		{
			yylex.(*parser).unexpected("label set", "string")
			yyVAL.label = labels.Label{}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:613
		{
			yylex.(*parser).unexpected("label set", "\"=\"")
			yyVAL.label = labels.Label{}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:615
		{
			yylex.(*parser).unexpected("label set", "identifier or \"}\"")
			yyVAL.label = labels.Label{}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:623
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels:    yyDollar[1].labels,
				histogram: yyDollar[2].histogram,
			}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:630
		{
			yylex.(*parser).generatedParserResult = &seriesDescription{
				labels: yyDollar[1].labels,
				values: yyDollar[2].series,
			}
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line promql/parser/generated_parser.y:659
		{
			yyVAL.histogram = Histogram{}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:670
		{
			yyVAL.histogram.Samples = yyDollar[3].buckets
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:674
		{
			yyVAL.histogram.Schema = yyDollar[3].uint
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:678
		{
			yylex.(*parser).unexpected("histogram descriptor", "")
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:683
		{
			yyVAL.buckets = [][]SequenceValue{}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:687
		{
			yyVAL.buckets = [][]SequenceValue{}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:691
		{
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:694
		{
			yylex.(*parser).unexpected("bucket values", "")
			yyVAL.buckets = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:698
		{
			yyVAL.buckets = append(yyDollar[1].buckets, yyDollar[3].buckets...)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:702
		{
			yyVAL.buckets = yyDollar[1].buckets
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:709
		{
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:714
		{
			yyVAL.series = []SequenceValue{}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:716
		{
			yyVAL.series = append(yyDollar[1].series, yyDollar[3].series...)
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:718
		{
			yyVAL.series = yyDollar[1].series
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:720
		{
			yylex.(*parser).unexpected("series values", "")
			yyVAL.series = nil
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:724
		{
			yyVAL.series = []SequenceValue{{Omitted: true}}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:726
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i < yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Omitted: true})
			}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:733
		{
			yyVAL.series = []SequenceValue{{Value: yyDollar[1].float}}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line promql/parser/generated_parser.y:735
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[3].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
			}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line promql/parser/generated_parser.y:742
		{
			yyVAL.series = []SequenceValue{}
			for i := uint64(0); i <= yyDollar[4].uint; i++ {
				yyVAL.series = append(yyVAL.series, SequenceValue{Value: yyDollar[1].float})
				yyDollar[1].float += yyDollar[2].float
			}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:753
		{
			if yyDollar[1].item.Val != "stale" {
				yylex.(*parser).unexpected("series values", "number or \"stale\"")
			}
			yyVAL.float = math.Float64frombits(value.StaleNaN)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:785
		{
			yyVAL.node = &NumberLiteral{
				Val:      yylex.(*parser).number(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:793
		{
			yyVAL.float = yylex.(*parser).number(yyDollar[1].item.Val)
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:795
		{
			yyVAL.float = yyDollar[2].float
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
//line promql/parser/generated_parser.y:796
		{
			yyVAL.float = -yyDollar[2].float
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:802
		{
			var err error
			yyVAL.uint, err = strconv.ParseUint(yyDollar[1].item.Val, 10, 64)
			if err != nil {
				yylex.(*parser).addParseErrf(yyDollar[1].item.PositionRange(), "invalid repetition in series values: %s", err)
			}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:812
		{
			var err error
			yyVAL.duration, err = parseDuration(yyDollar[1].item.Val)
			if err != nil {
				yylex.(*parser).addParseErr(yyDollar[1].item.PositionRange(), err)
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line promql/parser/generated_parser.y:823
		{
			yyVAL.node = &StringLiteral{
				Val:      yylex.(*parser).unquoteString(yyDollar[1].item.Val),
				PosRange: yyDollar[1].item.PositionRange(),
			}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:836
		{
			yyVAL.duration = 0
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line promql/parser/generated_parser.y:840
		{
			yyVAL.strings = nil
		}
	}
	goto yystack /* stack new state and value */
}
